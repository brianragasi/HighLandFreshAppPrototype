class InventoryFilters {    constructor(onFilterChange) {        this.onFilterChange = onFilterChange;        this.searchDebounceTimeout = null;        this.debounceDelay = 300;         this.elements = {            searchInput: document.getElementById('searchInput'),            stockFilter: document.getElementById('stockFilter')        };        this.currentFilters = {            searchTerm: '',            stockFilter: 'all'        };        this.initializeEventListeners();    }    initializeEventListeners() {        if (this.elements.searchInput) {            this.elements.searchInput.addEventListener('input', (event) => {                this.handleSearchInput(event.target.value);            });            this.elements.searchInput.addEventListener('keypress', (event) => {                if (event.key === 'Enter') {                    this.handleSearchImmediate(event.target.value);                }            });            this.elements.searchInput.addEventListener('search', (event) => {                if (event.target.value === '') {                    this.handleSearchImmediate('');                }            });        }        if (this.elements.stockFilter) {            this.elements.stockFilter.addEventListener('change', (event) => {                this.handleStockFilterChange(event.target.value);            });        }    }    handleSearchInput(searchTerm) {        if (this.searchDebounceTimeout) {            clearTimeout(this.searchDebounceTimeout);        }        this.searchDebounceTimeout = setTimeout(() => {            this.applySearch(searchTerm);        }, this.debounceDelay);    }    handleSearchImmediate(searchTerm) {        if (this.searchDebounceTimeout) {            clearTimeout(this.searchDebounceTimeout);            this.searchDebounceTimeout = null;        }        this.applySearch(searchTerm);    }    applySearch(searchTerm) {        const trimmedTerm = searchTerm.trim();        if (this.currentFilters.searchTerm !== trimmedTerm) {            this.currentFilters.searchTerm = trimmedTerm;            this.triggerFilterChange();        }    }    handleStockFilterChange(filterValue) {        if (this.currentFilters.stockFilter !== filterValue) {            this.currentFilters.stockFilter = filterValue;            this.triggerFilterChange();        }    }    triggerFilterChange() {        if (typeof this.onFilterChange === 'function') {            this.onFilterChange(this.currentFilters);        }    }    getCurrentFilters() {        return { ...this.currentFilters };    }    setSearchTerm(searchTerm) {        const trimmedTerm = (searchTerm || '').trim();        if (this.elements.searchInput) {            this.elements.searchInput.value = trimmedTerm;        }        this.currentFilters.searchTerm = trimmedTerm;    }    setStockFilter(filterValue) {        const validFilters = ['all', 'low_stock', 'out_of_stock', 'healthy'];        const safeValue = validFilters.includes(filterValue) ? filterValue : 'all';        if (this.elements.stockFilter) {            this.elements.stockFilter.value = safeValue;        }        this.currentFilters.stockFilter = safeValue;    }    clearFilters() {        this.setSearchTerm('');        this.setStockFilter('all');        this.triggerFilterChange();    }    reset() {        this.clearFilters();    }    focusSearch() {        if (this.elements.searchInput) {            this.elements.searchInput.focus();        }    }    filterInventoryData(inventoryData, filters = null) {        if (!Array.isArray(inventoryData)) {            return [];        }        const filterCriteria = filters || this.currentFilters;        let filteredData = [...inventoryData];        if (filterCriteria.searchTerm) {            const searchLower = filterCriteria.searchTerm.toLowerCase();            filteredData = filteredData.filter(product => {                return (                    product.name.toLowerCase().includes(searchLower) ||                    product.barcode.toLowerCase().includes(searchLower) ||                    (product.category && product.category.toLowerCase().includes(searchLower)) ||                    (product.supplier_name && product.supplier_name.toLowerCase().includes(searchLower)) ||                    (product.description && product.description.toLowerCase().includes(searchLower))                );            });        }        switch (filterCriteria.stockFilter) {            case 'low_stock':                filteredData = filteredData.filter(product => product.low_stock);                break;            case 'out_of_stock':                filteredData = filteredData.filter(product => product.quantity_on_hand === 0);                break;            case 'healthy':                filteredData = filteredData.filter(product =>                     product.quantity_on_hand > product.reorder_level                );                break;            case 'all':            default:                break;        }        return filteredData;    }    getFilterSummary() {        const summary = {            hasActiveFilters: false,            activeFilters: []        };        if (this.currentFilters.searchTerm) {            summary.hasActiveFilters = true;            summary.activeFilters.push(`Search: "${this.currentFilters.searchTerm}"`);        }        if (this.currentFilters.stockFilter !== 'all') {            summary.hasActiveFilters = true;            const filterLabels = {                'low_stock': 'Low Stock Only',                'out_of_stock': 'Out of Stock Only',                'healthy': 'Healthy Stock Only'            };            summary.activeFilters.push(`Filter: ${filterLabels[this.currentFilters.stockFilter]}`);        }        return summary;    }    addKeyboardShortcuts() {        document.addEventListener('keydown', (event) => {            if ((event.ctrlKey || event.metaKey) && event.key === 'f') {                event.preventDefault();                this.focusSearch();            }            if (event.key === 'Escape' && document.activeElement === this.elements.searchInput) {                this.clearFilters();                this.elements.searchInput.blur();            }        });    }    validateSearchTerm(searchTerm) {        const result = {            isValid: true,            message: ''        };        if (searchTerm.length > 100) {            result.isValid = false;            result.message = 'Search term is too long (maximum 100 characters)';        }        const harmfulPatterns = [/<script/i, /javascript:/i, /onload=/i];        if (harmfulPatterns.some(pattern => pattern.test(searchTerm))) {            result.isValid = false;            result.message = 'Invalid characters in search term';        }        return result;    }    getSearchSuggestions(inventoryData, searchTerm) {        if (!Array.isArray(inventoryData) || !searchTerm || searchTerm.length < 2) {            return [];        }        const searchLower = searchTerm.toLowerCase();        const suggestions = new Set();        inventoryData.forEach(product => {            if (product.name.toLowerCase().startsWith(searchLower)) {                suggestions.add(product.name);            }            if (product.category && product.category.toLowerCase().includes(searchLower)) {                suggestions.add(product.category);            }            if (product.supplier_name && product.supplier_name.toLowerCase().includes(searchLower)) {                suggestions.add(product.supplier_name);            }        });        return Array.from(suggestions).slice(0, 5);     }    destroy() {        if (this.searchDebounceTimeout) {            clearTimeout(this.searchDebounceTimeout);        }    }}if (typeof module !== 'undefined' && module.exports) {    module.exports = InventoryFilters;}