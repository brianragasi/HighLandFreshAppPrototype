class InventoryRenderer {    constructor() {        this.elements = {            totalProducts: document.getElementById('totalProducts'),            lowStockCount: document.getElementById('lowStockCount'),            outOfStockCount: document.getElementById('outOfStockCount'),            healthyStockCount: document.getElementById('healthyStockCount'),            lowStockPercentage: document.getElementById('lowStockPercentage'),            outOfStockPercentage: document.getElementById('outOfStockPercentage'),            loadingSpinner: document.getElementById('loadingSpinner'),            statsContainer: document.getElementById('statsContainer'),            controlsContainer: document.getElementById('controlsContainer'),            inventoryContainer: document.getElementById('inventoryContainer'),            errorAlert: document.getElementById('errorAlert'),            emptyState: document.getElementById('emptyState'),            inventoryTableBody: document.getElementById('inventoryTableBody'),            filteredCount: document.getElementById('filteredCount'),            errorMessage: document.getElementById('errorMessage'),            successToast: document.getElementById('successToast'),            successMessage: document.getElementById('successMessage')        };    }    showLoading() {    this.hideAllSections();    this.elements.loadingSpinner.classList.remove('d-none');    }    hideLoading() {    this.elements.loadingSpinner.classList.add('d-none');    this.elements.statsContainer.classList.remove('d-none');    this.elements.controlsContainer.classList.remove('d-none');    this.elements.inventoryContainer.classList.remove('d-none');    }    hideAllSections() {    this.elements.loadingSpinner.classList.add('d-none');    this.elements.statsContainer.classList.add('d-none');    this.elements.controlsContainer.classList.add('d-none');    this.elements.inventoryContainer.classList.add('d-none');    this.elements.errorAlert.classList.add('d-none');    this.elements.emptyState.classList.add('d-none');    }    renderStatistics(stats) {        if (!stats || typeof stats !== 'object') {            console.error('Invalid statistics data');            return;        }        this.updateElement(this.elements.totalProducts, stats.total_products || 0);        this.updateElement(this.elements.lowStockCount, stats.low_stock_count || 0);        this.updateElement(this.elements.outOfStockCount, stats.out_of_stock_count || 0);        this.updateElement(this.elements.healthyStockCount, stats.healthy_stock_count || 0);        this.updateElement(this.elements.lowStockPercentage, `${stats.low_stock_percentage || 0}%`);        this.updateElement(this.elements.outOfStockPercentage, `${stats.out_of_stock_percentage || 0}%`);    }    renderInventoryTable(inventoryData) {        if (!Array.isArray(inventoryData)) {            console.error('Invalid inventory data');            this.showEmptyState();            return;        }        if (inventoryData.length === 0) {            this.showEmptyState();            return;        }        this.updateElement(this.elements.filteredCount, `${inventoryData.length} items`);        this.elements.inventoryTableBody.innerHTML = '';        inventoryData.forEach(product => {            const row = this.createInventoryRow(product);            this.elements.inventoryTableBody.appendChild(row);        });    this.elements.inventoryContainer.classList.remove('d-none');    this.elements.emptyState.classList.add('d-none');    }    createInventoryRow(product) {        const row = document.createElement('tr');        if (product.quantity_on_hand === 0) {            row.classList.add('out-of-stock-row');        } else if (product.low_stock) {            row.classList.add('low-stock-row');        }        const stockStatus = this.getStockStatusBadge(product);        row.innerHTML = `            <td>                <strong>${this.escapeHtml(product.name)}</strong>                ${product.description ? `<br><small class="text-muted">${this.escapeHtml(product.description)}</small>` : ''}            </td>            <td>                <code>${this.escapeHtml(product.barcode)}</code>            </td>            <td>${this.escapeHtml(product.category || 'N/A')}</td>            <td>${this.escapeHtml(product.supplier_name || 'No Supplier')}</td>            <td>                <strong>${this.formatNumber(product.quantity_on_hand)}</strong>                ${product.unit_abbreviation ? ` <small class="text-muted">${this.escapeHtml(product.unit_abbreviation)}</small>` : ''}            </td>            <td>                ${this.formatNumber(product.reorder_level)}                ${product.unit_abbreviation ? ` <small class="text-muted">${this.escapeHtml(product.unit_abbreviation)}</small>` : ''}            </td>            <td>${this.escapeHtml(product.unit || 'N/A')}</td>            <td>${stockStatus}</td>            <td>                <div class="btn-group btn-group-sm" role="group">                    <button type="button" class="btn btn-outline-primary" onclick="viewProductDetails(${product.product_id})" title="View Details">                        <i class="fas fa-eye"></i>                    </button>                    ${this.hasAdminRole() ? `                        <button type="button" class="btn btn-outline-secondary" onclick="editProduct(${product.product_id})" title="Edit Product">                            <i class="fas fa-edit"></i>                        </button>                    ` : ''}                </div>            </td>        `;        return row;    }    getStockStatusBadge(product) {        if (product.quantity_on_hand === 0) {            return '<span class="stock-status status-out">Out of Stock</span>';        } else if (product.low_stock) {            return '<span class="stock-status status-low">Low Stock</span>';        } else {            return '<span class="stock-status status-healthy">Healthy</span>';        }    }    showEmptyState(message = null) {    this.elements.inventoryContainer.classList.add('d-none');    this.elements.emptyState.classList.remove('d-none');        if (message) {            const emptyStateMessage = this.elements.emptyState.querySelector('p');            if (emptyStateMessage) {                emptyStateMessage.textContent = message;            }        }        this.updateElement(this.elements.filteredCount, '0 items');    }    showError(message) {        this.hideAllSections();    this.updateElement(this.elements.errorMessage, message);    this.elements.errorAlert.classList.remove('d-none');    }    showSuccess(message) {        this.updateElement(this.elements.successMessage, message);        const toast = new bootstrap.Toast(this.elements.successToast, {            autohide: true,            delay: 3000        });        toast.show();    }    updateElement(element, content) {        if (element) {            if (typeof content === 'number') {                element.textContent = content.toString();            } else {                element.textContent = content || '';            }        }    }    formatNumber(value) {        if (value === null || value === undefined) {            return '0';        }        const num = parseFloat(value);        if (isNaN(num)) {            return '0';        }        return num.toFixed(2).replace(/\.?0+$/, '');    }    escapeHtml(text) {        if (text === null || text === undefined) {            return '';        }        const div = document.createElement('div');        div.textContent = text;        return div.innerHTML;    }    hasAdminRole() {        if (typeof hasRole === 'function') {            return hasRole('Admin');        }        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');        return loggedInUser.role === 'Admin';    }    clear() {        Object.values(this.elements).forEach(element => {            if (element && element.textContent !== undefined) {                element.textContent = '';            }        });        if (this.elements.inventoryTableBody) {            this.elements.inventoryTableBody.innerHTML = '';        }        this.hideAllSections();    }    updateSortingIndicators(sortField, sortDirection) {        const headers = document.querySelectorAll('.inventory-table th');        headers.forEach(header => {            header.classList.remove('sorted-asc', 'sorted-desc');        });        const currentHeader = document.querySelector(`[data-sort="${sortField}"]`);        if (currentHeader) {            currentHeader.classList.add(`sorted-${sortDirection}`);        }    }}if (typeof module !== 'undefined' && module.exports) {    module.exports = InventoryRenderer;}