class CategoryAPI {    constructor() {        this.baseURL = '../api/products.php';        this.axios = window.axios;        this.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';    }    async getCategories() {        try {            const response = await this.axios.get(`${this.baseURL}?operation=get_categories_with_stats`);            return this.handleResponse(response);        } catch (error) {            throw this.handleError(error, 'Failed to fetch categories');        }    }    async createCategory(categoryData) {        try {            const response = await this.axios.post(`${this.baseURL}?operation=create_category`, categoryData);            return this.handleResponse(response);        } catch (error) {            throw this.handleError(error, 'Failed to create category');        }    }    async updateCategory(categoryId, categoryData) {        try {            const response = await this.axios.put(`${this.baseURL}?operation=update_category&id=${categoryId}`, categoryData);            return this.handleResponse(response);        } catch (error) {            throw this.handleError(error, 'Failed to update category');        }    }    async deleteCategory(categoryId, options = {}) {        try {            const response = await this.axios.delete(`${this.baseURL}?operation=delete_category&id=${categoryId}`, {                data: options            });            return this.handleResponse(response);        } catch (error) {            throw this.handleError(error, 'Failed to delete category');        }    }    async getCategoriesForDropdown() {        try {            const result = await this.getCategories();            if (result.success && result.data) {                return result.data                    .filter(cat => cat.is_active)                    .map(cat => ({                        value: cat.category_id,                        text: cat.category_name,                        parent_id: cat.parent_category_id                    }));            }            return [];        } catch (error) {            console.error('Failed to fetch categories for dropdown:', error);            return [];        }    }    handleResponse(response) {        if (response.data && typeof response.data === 'object') {            return response.data;        }        try {            const parsed = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;            return parsed;        } catch (parseError) {            throw new Error('Invalid response format from server');        }    }    handleError(error, defaultMessage) {        if (error.response) {            const data = error.response.data;            if (data && data.message) {                return new Error(data.message);            }            return new Error(`${defaultMessage}: ${error.response.status} ${error.response.statusText}`);        } else if (error.request) {            return new Error(`${defaultMessage}: Network error. Please check your connection.`);        } else {            return new Error(`${defaultMessage}: ${error.message}`);        }    }    validateCategoryData(categoryData) {        const errors = {};        if (!categoryData.category_name || categoryData.category_name.trim().length === 0) {            errors.category_name = 'Category name is required';        } else if (categoryData.category_name.length > 100) {            errors.category_name = 'Category name must be 100 characters or less';        }        if (categoryData.description && categoryData.description.length > 255) {            errors.description = 'Description must be 255 characters or less';        }        if (categoryData.parent_category_id && !Number.isInteger(Number(categoryData.parent_category_id))) {            errors.parent_category_id = 'Invalid parent category';        }        return {            isValid: Object.keys(errors).length === 0,            errors: errors        };    }    sanitizeCategoryData(categoryData) {        const sanitized = {};        if (categoryData.category_name) {            sanitized.category_name = categoryData.category_name.trim();        }        if (categoryData.description) {            sanitized.description = categoryData.description.trim() || null;        }        if (categoryData.parent_category_id && categoryData.parent_category_id !== '') {            sanitized.parent_category_id = parseInt(categoryData.parent_category_id);        } else {            sanitized.parent_category_id = null;        }        sanitized.is_active = Boolean(categoryData.is_active);        return sanitized;    }}window.CategoryAPI = CategoryAPI;