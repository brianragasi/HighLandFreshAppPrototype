class CategoryRenderer {    constructor() {        this.categoriesTableBody = document.getElementById('categoriesTableBody');        this.parentCategorySelect = document.getElementById('parentCategory');    }    renderCategoriesTable(categories) {        if (!this.categoriesTableBody) {            console.error('Categories table body not found');            return;        }        if (!categories || categories.length === 0) {            this.showEmptyState();            return;        }        this.hideEmptyState();        this.categoriesTableBody.innerHTML = '';        categories.forEach(category => {            const row = this.createCategoryRow(category);            this.categoriesTableBody.appendChild(row);        });    }    createCategoryRow(category) {        const row = document.createElement('tr');        const isActive = Boolean(category.is_active);        const productCount = parseInt(category.product_count) || 0;        const subcategoryCount = parseInt(category.subcategory_count) || 0;        row.className = isActive ? '' : 'table-secondary';        row.setAttribute('data-category-id', category.category_id);        row.innerHTML = `            <td>                <div class="fw-semibold">${this.escapeHtml(category.category_name)}</div>                ${subcategoryCount > 0 ? `<small class="text-muted">${subcategoryCount} subcategories</small>` : ''}            </td>            <td>                <span class="text-muted">${category.description ? this.escapeHtml(category.description) : 'No description'}</span>            </td>            <td>                ${category.parent_name ?                     `<span class="badge bg-light text-dark">${this.escapeHtml(category.parent_name)}</span>` :                     '<span class="text-muted">Root Category</span>'                }            </td>            <td>                <span class="badge ${productCount > 0 ? 'bg-success' : 'bg-secondary'}">                    ${productCount} products                </span>            </td>            <td>                <div class="d-flex align-items-center">                    <span class="badge ${isActive ? 'bg-success' : 'bg-secondary'} me-2">                        ${isActive ? 'Active' : 'Inactive'}                    </span>                    <button type="button" class="btn btn-sm ${isActive ? 'btn-outline-warning' : 'btn-outline-success'}"                             onclick="toggleCategoryStatus(${category.category_id}, ${!isActive})"                             title="${isActive ? 'Deactivate' : 'Activate'} Category">                        <i class="bi bi-${isActive ? 'eye-slash' : 'eye'}"></i>                    </button>                </div>            </td>            <td>                <small class="text-muted">${this.formatDate(category.created_at)}</small>            </td>            <td>                <div class="btn-group btn-group-sm" role="group">                    <button type="button" class="btn btn-outline-primary"                             onclick="editCategory(${category.category_id})"                             title="Edit Category">                        <i class="bi bi-pencil"></i>                    </button>                    <button type="button" class="btn btn-outline-info"                             onclick="viewCategoryDetails(${category.category_id})"                             title="View Details">                        <i class="bi bi-eye"></i>                    </button>                    <button type="button" class="btn btn-outline-danger"                             onclick="confirmDeleteCategory(${category.category_id}, '${this.escapeForJs(category.category_name)}', ${productCount}, ${subcategoryCount})"                             title="Delete Category">                        <i class="bi bi-trash"></i>                    </button>                </div>            </td>        `;        return row;    }    showEmptyState() {        const emptyElement = document.getElementById('categoriesEmpty');        const tableContainer = this.categoriesTableBody?.closest('.table-responsive');        if (emptyElement) emptyElement.classList.remove('d-none');        if (tableContainer) tableContainer.classList.add('d-none');    }    hideEmptyState() {        const emptyElement = document.getElementById('categoriesEmpty');        const tableContainer = this.categoriesTableBody?.closest('.table-responsive');        if (emptyElement) emptyElement.classList.add('d-none');        if (tableContainer) tableContainer.classList.remove('d-none');    }    showLoadingState() {        const loadingElement = document.getElementById('categoriesLoading');        const tableContainer = this.categoriesTableBody?.closest('.table-responsive');        const emptyElement = document.getElementById('categoriesEmpty');        if (loadingElement) loadingElement.classList.remove('d-none');        if (tableContainer) tableContainer.classList.add('d-none');        if (emptyElement) emptyElement.classList.add('d-none');    }    hideLoadingState() {        const loadingElement = document.getElementById('categoriesLoading');        if (loadingElement) loadingElement.classList.add('d-none');    }    filterCategoriesTable(searchTerm, statusFilter) {        const rows = this.categoriesTableBody?.querySelectorAll('tr');        if (!rows) return;        let visibleCount = 0;        rows.forEach(row => {            const categoryName = row.cells[0]?.textContent.toLowerCase() || '';            const description = row.cells[1]?.textContent.toLowerCase() || '';            const statusBadge = row.cells[4]?.querySelector('.badge');            const badgeText = statusBadge?.textContent?.trim().toLowerCase();            const isActive = badgeText === 'active';            const matchesSearch = !searchTerm ||                 categoryName.includes(searchTerm.toLowerCase()) ||                 description.includes(searchTerm.toLowerCase());            const matchesStatus = !statusFilter ||                 (statusFilter === '1' && isActive) ||                 (statusFilter === '0' && !isActive);            if (matchesSearch && matchesStatus) {                row.style.display = '';                visibleCount++;            } else {                row.style.display = 'none';            }        });        if (visibleCount === 0 && rows.length > 0) {            this.showEmptyState();        } else if (visibleCount > 0) {            this.hideEmptyState();        }    }    formatDate(dateString) {        if (!dateString) return 'Invalid Date';        try {            let date;            if (typeof dateString === 'string' && dateString.includes(' ')) {                date = new Date(dateString.replace(' ', 'T'));            } else {                date = new Date(dateString);            }            if (isNaN(date.getTime())) {                return 'Invalid Date';            }            return date.toLocaleDateString('en-US', {                year: 'numeric',                month: 'short',                day: 'numeric'            });        } catch (error) {            console.warn('Date formatting error:', error, 'for date:', dateString);            return 'Invalid Date';        }    }    escapeHtml(text) {        const div = document.createElement('div');        div.textContent = text;        return div.innerHTML;    }    escapeForJs(text) {        return text.replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/\\/g, '\\\\');    }    highlightSearchTerm(text, searchTerm) {        if (!searchTerm) return this.escapeHtml(text);        const escapedText = this.escapeHtml(text);        const escapedTerm = this.escapeHtml(searchTerm);        const regex = new RegExp(`(${escapedTerm})`, 'gi');        return escapedText.replace(regex, '<mark>$1</mark>');    }    async toggleCategoryStatus(categoryId, newStatus) {        if (window.categoryManager && window.categoryManager.api) {            try {                await window.categoryManager.api.updateCategory(categoryId, { is_active: newStatus });                window.categoryManager.loadCategories();                 const action = newStatus ? 'activated' : 'deactivated';                if (window.showAlert) {                    window.showAlert('success', `Category ${action} successfully`);                }            } catch (error) {                console.error('Failed to toggle category status:', error);                if (window.showAlert) {                    window.showAlert('danger', 'Failed to update category status: ' + error.message);                }            }        }    }    viewCategoryDetails(categoryId) {        if (window.categoryManager) {            const category = window.categoryManager.getCategoryById(categoryId);            if (category) {                this.showCategoryDetailsModal(category);            }        }    }    showCategoryDetailsModal(category) {        const modalHtml = `            <div class="modal fade" id="categoryDetailsModal" tabindex="-1">                <div class="modal-dialog">                    <div class="modal-content">                        <div class="modal-header">                            <h5 class="modal-title">Category Details</h5>                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>                        </div>                        <div class="modal-body">                            <dl class="row">                                <dt class="col-sm-4">Name:</dt>                                <dd class="col-sm-8">${this.escapeHtml(category.category_name)}</dd>                                <dt class="col-sm-4">Description:</dt>                                <dd class="col-sm-8">${category.description ? this.escapeHtml(category.description) : '<em>No description</em>'}</dd>                                <dt class="col-sm-4">Parent:</dt>                                <dd class="col-sm-8">${category.parent_name ? this.escapeHtml(category.parent_name) : '<em>Root Category</em>'}</dd>                                <dt class="col-sm-4">Status:</dt>                                <dd class="col-sm-8">                                    <span class="badge ${category.is_active ? 'bg-success' : 'bg-secondary'}">                                        ${category.is_active ? 'Active' : 'Inactive'}                                    </span>                                </dd>                                <dt class="col-sm-4">Products:</dt>                                <dd class="col-sm-8">${category.product_count || 0}</dd>                                <dt class="col-sm-4">Subcategories:</dt>                                <dd class="col-sm-8">${category.subcategory_count || 0}</dd>                                <dt class="col-sm-4">Created:</dt>                                <dd class="col-sm-8">${this.formatDate(category.created_at)}</dd>                            </dl>                        </div>                        <div class="modal-footer">                            <button type="button" class="btn btn-primary" onclick="editCategory(${category.category_id}); bootstrap.Modal.getInstance(document.getElementById('categoryDetailsModal')).hide();">                                <i class="bi bi-pencil"></i> Edit                            </button>                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>                        </div>                    </div>                </div>            </div>        `;        const existingModal = document.getElementById('categoryDetailsModal');        if (existingModal) {            existingModal.remove();        }        document.body.insertAdjacentHTML('beforeend', modalHtml);        const modal = new bootstrap.Modal(document.getElementById('categoryDetailsModal'));        modal.show();        document.getElementById('categoryDetailsModal').addEventListener('hidden.bs.modal', function() {            this.remove();        });    }}window.CategoryRenderer = CategoryRenderer;window.toggleCategoryStatus = (categoryId, newStatus) => {    if (window.categoryManager && window.categoryManager.categoryRenderer) {        window.categoryManager.categoryRenderer.toggleCategoryStatus(categoryId, newStatus);    }};window.viewCategoryDetails = (categoryId) => {    if (window.categoryManager && window.categoryManager.categoryRenderer) {        window.categoryManager.categoryRenderer.viewCategoryDetails(categoryId);    }};