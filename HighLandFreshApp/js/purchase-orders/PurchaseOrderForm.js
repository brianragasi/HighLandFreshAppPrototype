class PurchaseOrderForm {    constructor(poAPI, productSelector) {        this.poAPI = poAPI;        this.productSelector = productSelector;        this.suppliers = [];        this.isEditMode = false;        this.currentPOId = null;        this.init();    }    init() {        const modalEl = document.getElementById('poModal');        this.modal = modalEl ? new bootstrap.Modal(modalEl) : null;        this.form = document.getElementById('poForm');        this.elements = {            supplierSelect: document.getElementById('supplierSelect'),            supplierInfo: document.getElementById('supplierInfo'),            supplierDetails: document.getElementById('supplierDetails'),            cooperativeInfo: document.getElementById('cooperativeInfo'),            expectedDeliveryDate: document.getElementById('expectedDeliveryDate'),            milkQualityGrade: document.getElementById('milkQualityGrade'),            coldChainTempMin: document.getElementById('coldChainTempMin'),            coldChainTempMax: document.getElementById('coldChainTempMax'),            deliverySchedule: document.getElementById('deliverySchedule'),            notes: document.getElementById('notes'),            selectedItemsTable: document.getElementById('selectedItemsTable'),            totalAmount: document.getElementById('totalAmount'),            noItemsMessage: document.getElementById('noItemsMessage'),            saveBtn: document.getElementById('savePOBtn'),            saveSpinner: document.getElementById('saveSpinner'),            modalTitle: document.getElementById('poModalLabel'),            purchaseTypeGroup: document.getElementById('purchaseTypeGroup'),            supplierLabel: document.getElementById('supplierLabel'),            deliveryNote: document.getElementById('deliveryNote'),            dairySpecificFields: document.getElementById('dairySpecificFields')        };        this.attachEventListeners();        this.loadSuppliers();    }    attachEventListeners() {        if (this.elements.saveBtn) {            this.elements.saveBtn.addEventListener('click', () => {                this.submitForm();            });        }        if (this.elements.supplierSelect) {            this.elements.supplierSelect.addEventListener('change', () => {                this.onSupplierChange();                this.clearValidationError('supplierSelect');            });        }        if (this.elements.purchaseTypeGroup) {            this.elements.purchaseTypeGroup.addEventListener('change', (e) => {                this.onPurchaseTypeChange(e.target.value);            });        }        ['expectedDeliveryDate', 'notes', 'milkQualityGrade', 'coldChainTempMin', 'coldChainTempMax', 'deliverySchedule'].forEach(fieldId => {            const element = this.elements[fieldId];            if (element) {                element.addEventListener('input', () => {                    this.clearValidationError(fieldId);                });            }        });        const poModalEl = document.getElementById('poModal');        if (poModalEl) {            poModalEl.addEventListener('hidden.bs.modal', () => {                this.resetForm();            });        }    }    onPurchaseTypeChange(purchaseType) {        const supplierLabel = this.elements.supplierLabel;        const deliveryNote = this.elements.deliveryNote;        const dairyFields = this.elements.dairySpecificFields;        switch (purchaseType) {            case 'raw_milk':                if (supplierLabel) supplierLabel.textContent = 'Dairy Cooperative / Farm';                if (deliveryNote) deliveryNote.textContent = 'Daily milk delivery schedule';                if (dairyFields) dairyFields.style.display = 'flex';                this.filterSuppliersByType(['Dairy Cooperative', 'Individual Farm']);                break;            case 'packaging':                if (supplierLabel) supplierLabel.textContent = 'Packaging Supplier';                if (deliveryNote) deliveryNote.textContent = 'Weekly/monthly supply delivery';                if (dairyFields) dairyFields.style.display = 'none';                this.filterSuppliersByType(['Packaging Supplier']);                break;            case 'general':                if (supplierLabel) supplierLabel.textContent = 'General Supplier';                if (deliveryNote) deliveryNote.textContent = 'Standard delivery schedule';                if (dairyFields) dairyFields.style.display = 'none';                this.filterSuppliersByType(['Ingredient Supplier', 'Equipment Supplier']);                break;        }    }    onSupplierChange() {        const supplierSelect = this.elements.supplierSelect;        const supplierInfo = this.elements.supplierInfo;        const supplierDetails = this.elements.supplierDetails;        const cooperativeInfo = this.elements.cooperativeInfo;        if (!supplierSelect || !supplierInfo) return;        const selectedSupplierId = supplierSelect.value;        if (!selectedSupplierId) {            supplierInfo.classList.add('d-none');            return;        }        const supplier = this.suppliers.find(s => s.supplier_id == selectedSupplierId);        if (!supplier) return;        let infoHtml = `<strong>${supplier.name}</strong><br>`;        infoHtml += `<i class="bi bi-geo-alt me-1"></i>${supplier.city || 'N/A'}<br>`;        infoHtml += `<i class="bi bi-telephone me-1"></i>${supplier.phone_number || 'N/A'}`;        if (supplier.supplier_type === 'Dairy Cooperative' && supplier.daily_milk_capacity_liters) {            infoHtml += `<br><i class="bi bi-droplet me-1"></i>Daily Capacity: ${supplier.daily_milk_capacity_liters}L`;        }        if (supplierDetails) supplierDetails.innerHTML = infoHtml;        if (cooperativeInfo) {            if (supplier.is_nmfdc_member == 1) {                cooperativeInfo.classList.remove('d-none');            } else {                cooperativeInfo.classList.add('d-none');            }        }        supplierInfo.classList.remove('d-none');    }    filterSuppliersByType(allowedTypes) {        const supplierSelect = this.elements.supplierSelect;        if (!supplierSelect) return;        while (supplierSelect.children.length > 1) {            supplierSelect.removeChild(supplierSelect.lastChild);        }        const filteredSuppliers = this.suppliers.filter(supplier =>             allowedTypes.includes(supplier.supplier_type)        );        filteredSuppliers.forEach(supplier => {            const option = document.createElement('option');            option.value = supplier.supplier_id;            let displayName = supplier.name;            if (supplier.is_nmfdc_member == 1) {                displayName += ' ⭐ (NMFDC Member)';            }            option.textContent = displayName;            supplierSelect.appendChild(option);        });    }    async loadSuppliers() {        try {            const response = await this.poAPI.getAllSuppliers();            if (response.success) {                this.suppliers = response.data || [];                this.populateSupplierDropdown();            } else {                console.error('Failed to load suppliers:', response.message);            }        } catch (error) {            console.error('Error loading suppliers:', error);        }    }    populateSupplierDropdown() {        const supplierOptions = this.suppliers            .filter(supplier => supplier.is_active !== false)            .map(supplier =>                 `<option value="${supplier.supplier_id}">${this.escapeHtml(supplier.name)}</option>`            ).join('');        this.elements.supplierSelect.innerHTML = `            <option value="">Select Supplier</option>            ${supplierOptions}        `;    }    showCreateModal() {        this.isEditMode = false;        this.currentPOId = null;        this.elements.modalTitle.textContent = 'Create Purchase Order';        this.elements.saveBtn.innerHTML = '<i class="bi bi-envelope me-2"></i>Create & Send PO';        this.resetForm();        this.modal.show();    }    updateSelectedItemsTable() {        const selectedProducts = this.productSelector.getSelectedProducts();        if (selectedProducts.length === 0) {            this.elements.selectedItemsTable.innerHTML = '';            this.elements.noItemsMessage.style.display = 'block';            this.elements.totalAmount.textContent = this.poAPI.formatCurrency(0);            return;        }        this.elements.noItemsMessage.style.display = 'none';        const itemsHtml = selectedProducts.map(product => {            const lineTotal = product.quantity * product.unit_cost;            return `                <tr data-product-id="${product.product_id}">                    <td>                        <strong>${this.escapeHtml(product.name)}</strong>                        <br><small class="text-muted">Barcode: ${this.escapeHtml(product.barcode)}</small>                    </td>                    <td>                        <input type="number"                                class="form-control form-control-sm quantity-input"                                value="${product.quantity}"                                min="0.01"                                step="0.01"                               data-product-id="${product.product_id}"                               onchange="window.poManager.poForm.updateItemQuantity(${product.product_id}, this.value)">                    </td>                    <td>                        <input type="number"                                class="form-control form-control-sm unit-cost-input"                                value="${product.unit_cost}"                                min="0.01"                                step="0.01"                               data-product-id="${product.product_id}"                               onchange="window.poManager.poForm.updateItemUnitCost(${product.product_id}, this.value)">                    </td>                    <td class="text-end line-total">${this.poAPI.formatCurrency(lineTotal)}</td>                    <td>                        <button type="button"                                 class="btn btn-sm btn-outline-danger"                                 onclick="window.poManager.productSelector.removeProduct(${product.product_id})"                                title="Remove item">                            <i class="bi bi-trash"></i>                        </button>                    </td>                </tr>            `;        }).join('');        this.elements.selectedItemsTable.innerHTML = itemsHtml;        this.updateTotalAmount();    }    updateItemQuantity(productId, quantity) {        const numQuantity = Math.max(0.01, parseFloat(quantity) || 0.01);        this.productSelector.updateProductQuantity(productId, numQuantity);        const input = document.querySelector(`input.quantity-input[data-product-id="${productId}"]`);        if (input) {            input.value = numQuantity;        }        this.updateLineTotal(productId);        this.updateTotalAmount();    }    updateItemUnitCost(productId, unitCost) {        const numUnitCost = Math.max(0.01, parseFloat(unitCost) || 0.01);        this.productSelector.updateProductUnitCost(productId, numUnitCost);        const input = document.querySelector(`input.unit-cost-input[data-product-id="${productId}"]`);        if (input) {            input.value = numUnitCost.toFixed(2);        }        this.updateLineTotal(productId);        this.updateTotalAmount();    }    updateLineTotal(productId) {        const selectedProducts = this.productSelector.getSelectedProducts();        const product = selectedProducts.find(p => p.product_id == productId);        if (product) {            const lineTotal = product.quantity * product.unit_cost;            const lineTotalElement = document.querySelector(`tr[data-product-id="${productId}"] .line-total`);            if (lineTotalElement) {                lineTotalElement.textContent = this.poAPI.formatCurrency(lineTotal);            }        }    }    updateTotalAmount() {        const selectedProducts = this.productSelector.getSelectedProducts();        const total = selectedProducts.reduce((sum, product) => {            return sum + (product.quantity * product.unit_cost);        }, 0);        this.elements.totalAmount.textContent = this.poAPI.formatCurrency(total);    }    getFormData() {        const selectedProducts = this.productSelector.getSelectedProducts();        const purchaseType = document.querySelector('input[name="purchase_type"]:checked')?.value || 'raw_milk';        const formData = {            supplier_id: this.elements.supplierSelect.value,            expected_delivery_date: this.elements.expectedDeliveryDate.value || null,            purchase_type: purchaseType,            notes: this.elements.notes.value.trim() || null,            items: selectedProducts.map(product => ({                product_id: product.product_id,                quantity: product.quantity,                unit_cost: product.unit_cost,                batch_lot_number: product.batch_lot_number || null            }))        };        if (this.elements.dairySpecificFields && !this.elements.dairySpecificFields.style.display.includes('none')) {            if (this.elements.milkQualityGrade.value) {                formData.milk_quality_grade = this.elements.milkQualityGrade.value;            }            if (this.elements.coldChainTempMin.value) {                formData.cold_chain_temp_min = parseFloat(this.elements.coldChainTempMin.value);            }            if (this.elements.coldChainTempMax.value) {                formData.cold_chain_temp_max = parseFloat(this.elements.coldChainTempMax.value);            }            if (this.elements.deliverySchedule.value) {                formData.delivery_schedule = this.elements.deliverySchedule.value;            }        }        return formData;    }    validateForm(formData) {        this.clearAllValidationErrors();        const apiValidation = this.poAPI.validatePurchaseOrderData(formData);        if (!apiValidation.isValid) {            apiValidation.errors.forEach(error => {                if (error.includes('supplier')) {                    this.showValidationError('supplierSelect', error);                } else if (error.includes('delivery date')) {                    this.showValidationError('expectedDeliveryDate', error);                } else if (error.includes('item') || error.includes('product')) {                    this.showAlert('error', error);                }            });        }        return apiValidation;    }    async submitForm() {        if (this.elements.saveBtn.disabled) {            return;        }        const formData = this.getFormData();        const validation = this.validateForm(formData);        if (!validation.isValid) {            return;        }        try {            this.setSubmitLoading(true);            const response = await this.poAPI.createPurchaseOrder(formData);            if (response.success) {                this.showAlert('success',                     `Purchase Order created successfully! ${response.email_sent ? 'Email sent to supplier.' : 'Email delivery failed: ' + response.email_message}`                );                this.modal.hide();                if (window.poManager) {                    window.poManager.loadPurchaseOrders();                }            } else {                console.error('API Response:', response);                console.error('Response type:', typeof response);                console.error('Response keys:', Object.keys(response || {}));                const errorMessage = response?.message || response?.error || 'Unknown error occurred';                this.showAlert('error', 'Failed to create purchase order: ' + errorMessage);            }        } catch (error) {            console.error('Error submitting form:', error);            console.error('Error details:', {                message: error.message,                response: error.response,                request: error.request,                status: error.response?.status,                statusText: error.response?.statusText,                data: error.response?.data            });            let errorMessage;            if (error.code === 'ECONNABORTED') {                errorMessage = 'Request timed out. The purchase order may still have been created. Please check the purchase orders list.';            } else if (error.response) {                const serverMessage = error.response.data?.message || error.response.data?.error || error.response.statusText;                errorMessage = `Server error (${error.response.status}): ${serverMessage}`;            } else if (error.request) {                errorMessage = 'Network error: Unable to connect to server. Please check your connection.';            } else {                errorMessage = error.message || 'An unexpected error occurred';            }            this.showAlert('error', 'Error creating purchase order: ' + errorMessage);        } finally {            this.setSubmitLoading(false);        }    }    setSubmitLoading(loading) {        if (loading) {            this.elements.saveSpinner.classList.remove('d-none');            this.elements.saveBtn.disabled = true;        } else {            this.elements.saveSpinner.classList.add('d-none');            this.elements.saveBtn.disabled = false;        }    }    resetForm() {        if (this.form) this.form.reset();        this.clearAllValidationErrors();        this.productSelector.reset();        this.updateSelectedItemsTable();        const today = new Date().toISOString().split('T')[0];        if (this.elements.expectedDeliveryDate) {            this.elements.expectedDeliveryDate.min = today;        }    }    showValidationError(fieldId, message) {        const field = this.elements[fieldId];        if (field) {            field.classList.add('is-invalid');            const container = field.closest('.col-md-6, .mb-3, .form-group') || field.parentNode;            const feedback = container ? container.querySelector('.invalid-feedback') : null;            if (feedback) {                feedback.textContent = message;            }        }    }    clearValidationError(fieldId) {        const field = this.elements[fieldId];        if (field) {            field.classList.remove('is-invalid');            const container = field.closest('.col-md-6, .mb-3, .form-group') || field.parentNode;            const feedback = container ? container.querySelector('.invalid-feedback') : null;            if (feedback) {                feedback.textContent = '';            }        }    }    clearAllValidationErrors() {        Object.keys(this.elements).forEach(fieldId => {            this.clearValidationError(fieldId);        });    }    showAlert(type, message) {        const alertContainer = document.getElementById('alertContainer');        if (!alertContainer) return;        const alertClass = type === 'error' ? 'alert-danger' : `alert-${type}`;        const iconClass = type === 'error' ? 'exclamation-triangle' :                          type === 'success' ? 'check-circle' : 'info-circle';        const alertHtml = `            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">                <i class="bi bi-${iconClass} me-2"></i>                ${this.escapeHtml(message)}                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>            </div>        `;        alertContainer.innerHTML = alertHtml;        if (type === 'success') {            setTimeout(() => {                const alert = alertContainer.querySelector('.alert');                if (alert) {                    const bsAlert = new bootstrap.Alert(alert);                    bsAlert.close();                }            }, 5000);        }    }    escapeHtml(unsafe) {        return unsafe            .replace(/&/g, "&amp;")            .replace(/</g, "&lt;")            .replace(/>/g, "&gt;")            .replace(/"/g, "&quot;")            .replace(/'/g, "&#039;");    }}