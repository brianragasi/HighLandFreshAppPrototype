class ProductSelector {    constructor(poAPI) {        this.poAPI = poAPI;        this.products = [];        this.filteredProducts = [];        this.selectedProducts = new Map();         this.init();    }    init() {        this.searchInput = document.getElementById('productSearch');        this.showAllBtn = document.getElementById('showAllProductsBtn');        this.productList = document.getElementById('productList');        this.productLoadingSpinner = document.getElementById('productLoadingSpinner');        this.attachEventListeners();        this.loadProducts();    }    attachEventListeners() {        this.searchInput.addEventListener('input', (e) => {            this.filterProducts(e.target.value);        });        this.showAllBtn.addEventListener('click', () => {            this.searchInput.value = '';            this.filterProducts('');        });    }    async loadProducts() {        try {            this.showProductLoading(true);            const response = await this.poAPI.getAllProducts();            if (response.success) {                this.products = response.data || [];                this.filteredProducts = [...this.products];                this.renderProductList();            } else {                this.showProductError('Failed to load products: ' + response.message);            }        } catch (error) {            console.error('Error loading products:', error);            this.showProductError('Failed to load products. Please try again.');        } finally {            this.showProductLoading(false);        }    }    filterProducts(searchTerm) {        if (!searchTerm) {            this.filteredProducts = [...this.products];        } else {            const term = searchTerm.toLowerCase();            this.filteredProducts = this.products.filter(product =>                 product.name.toLowerCase().includes(term) ||                product.barcode.toLowerCase().includes(term) ||                (product.category && product.category.toLowerCase().includes(term))            );        }        this.renderProductList();    }    renderProductList() {        if (this.filteredProducts.length === 0) {            this.productList.innerHTML = `                <div class="text-center text-muted py-3">                    <i class="bi bi-search"></i>                    <div>No products found</div>                    <small>Try adjusting your search terms</small>                </div>            `;            return;        }        const productsHtml = this.filteredProducts.map(product => {            const isSelected = this.selectedProducts.has(product.product_id);            const isLowStock = product.quantity_on_hand <= product.reorder_level;            return `                <div class="product-item border-bottom py-2 ${isSelected ? 'bg-light' : ''}"                      data-product-id="${product.product_id}">                    <div class="d-flex justify-content-between align-items-center">                        <div class="flex-grow-1">                            <div class="d-flex align-items-center">                                <strong>${this.escapeHtml(product.name)}</strong>                                ${isLowStock ? '<span class="badge bg-warning ms-2">Low Stock</span>' : ''}                            </div>                            <small class="text-muted">                                Barcode: ${this.escapeHtml(product.barcode)} |                                 Category: ${this.escapeHtml(product.category || 'N/A')} |                                 Stock: ${product.quantity_on_hand}                            </small>                        </div>                        <div class="text-end">                            <div class="text-success fw-bold">${this.poAPI.formatCurrency(product.price)}</div>                            <button type="button"                                     class="btn btn-sm ${isSelected ? 'btn-success' : 'btn-outline-success'}"                                     onclick="window.poManager.productSelector.${isSelected ? 'removeProduct' : 'selectProduct'}(${product.product_id})">                                <i class="bi bi-${isSelected ? 'check' : 'plus'}"></i>                                ${isSelected ? 'Selected' : 'Add'}                            </button>                        </div>                    </div>                </div>            `;        }).join('');        this.productList.innerHTML = productsHtml;    }    selectProduct(productId) {        const product = this.products.find(p => p.product_id == productId);        if (!product) return;        this.selectedProducts.set(productId, {            ...product,            quantity: 1,            unit_cost: parseFloat(product.price) || 0        });        this.renderProductList();        if (window.poManager && window.poManager.poForm) {            window.poManager.poForm.updateSelectedItemsTable();        }    }    removeProduct(productId) {        this.selectedProducts.delete(productId);        this.renderProductList();        if (window.poManager && window.poManager.poForm) {            window.poManager.poForm.updateSelectedItemsTable();        }    }    getSelectedProducts() {        return Array.from(this.selectedProducts.values());    }    clearSelection() {        this.selectedProducts.clear();        this.renderProductList();        if (window.poManager && window.poManager.poForm) {            window.poManager.poForm.updateSelectedItemsTable();        }    }    updateProductQuantity(productId, quantity) {        const product = this.selectedProducts.get(productId);        if (product) {            product.quantity = Math.max(0, parseFloat(quantity) || 0);            this.selectedProducts.set(productId, product);        }    }    updateProductUnitCost(productId, unitCost) {        const product = this.selectedProducts.get(productId);        if (product) {            product.unit_cost = Math.max(0, parseFloat(unitCost) || 0);            this.selectedProducts.set(productId, product);        }    }    getLowStockProducts() {        return this.products.filter(product =>             product.quantity_on_hand <= product.reorder_level        ).sort((a, b) => {            const aRatio = a.quantity_on_hand / a.reorder_level;            const bRatio = b.quantity_on_hand / b.reorder_level;            return aRatio - bRatio;         });    }    showSuggestedProducts() {        const lowStockProducts = this.getLowStockProducts();        if (lowStockProducts.length === 0) {            this.productList.innerHTML = `                <div class="text-center text-success py-3">                    <i class="bi bi-check-circle fs-4"></i>                    <div class="mt-2">All products are well stocked!</div>                    <small class="text-muted">No low stock items found</small>                </div>            `;            return;        }        this.filteredProducts = lowStockProducts;        this.renderProductList();        this.searchInput.placeholder = `Showing ${lowStockProducts.length} low stock items`;    }    showProductLoading(show) {        if (this.productLoadingSpinner) {            this.productLoadingSpinner.style.display = show ? 'block' : 'none';        }        if (this.productList) {            this.productList.style.display = show ? 'none' : 'block';        }    }    showProductError(message) {        this.productList.innerHTML = `            <div class="text-center text-danger py-3">                <i class="bi bi-exclamation-triangle fs-4"></i>                <div class="mt-2">${this.escapeHtml(message)}</div>                <button type="button" class="btn btn-sm btn-outline-primary mt-2"                         onclick="window.poManager.productSelector.loadProducts()">                    <i class="bi bi-arrow-clockwise me-1"></i>Retry                </button>            </div>        `;    }    reset() {        this.searchInput.value = '';        this.searchInput.placeholder = 'Search products to add...';        this.clearSelection();        this.filterProducts('');    }    escapeHtml(unsafe) {        return unsafe            .replace(/&/g, "&amp;")            .replace(/</g, "&lt;")            .replace(/>/g, "&gt;")            .replace(/"/g, "&quot;")            .replace(/'/g, "&#039;");    }}