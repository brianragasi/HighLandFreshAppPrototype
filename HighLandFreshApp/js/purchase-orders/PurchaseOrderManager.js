class PurchaseOrderManager {    constructor() {        this.purchaseOrders = [];        this.filteredPurchaseOrders = [];        this.init();    }    async init() {        try {            this.poAPI = new PurchaseOrderAPI();            this.productSelector = new ProductSelector(this.poAPI);            this.poForm = new PurchaseOrderForm(this.poAPI, this.productSelector);            this.setupComponentCommunication();            await this.loadInitialData();            this.attachEventListeners();            this.handleDeepLinking();            console.log('Purchase Order Manager initialized successfully');        } catch (error) {            console.error('Error initializing Purchase Order Manager:', error);            this.showAlert('error', 'Failed to initialize purchase order interface');        }    }    setupComponentCommunication() {        this.productSelector.onSelectionChange = () => {            this.poForm.updateSelectedItemsTable();        };    }    async loadInitialData() {        await this.loadPurchaseOrders();        await this.loadStatistics();        await this.productSelector.loadProducts();    }    attachEventListeners() {        const createBtn = document.getElementById('createPOBtn');        if (createBtn) {            createBtn.addEventListener('click', () => {                this.showCreatePOModal();            });        }        const searchInput = document.getElementById('searchPO');         if (searchInput) {            searchInput.addEventListener('input', (e) => {                this.handleSearch(e.target.value);            });        }        const statusFilter = document.getElementById('statusFilter');        if (statusFilter) {            statusFilter.addEventListener('change', () => {                this.handleFilter();            });        }        const supplierFilter = document.getElementById('supplierFilter');        if (supplierFilter) {            supplierFilter.addEventListener('change', () => {                this.handleFilter();            });        }        const refreshBtn = document.getElementById('refreshBtn');        if (refreshBtn) {            refreshBtn.addEventListener('click', () => {                this.refreshData();            });        }        const tableBody = document.getElementById('poTableBody');        if (tableBody) {            tableBody.addEventListener('click', (e) => {                const row = e.target.closest('tr');                if (row && row.dataset.poId) {                    this.handleRowClick(row.dataset.poId, e);                }            });        }    }    async loadPurchaseOrders() {        try {            this.showLoading(true);            const response = await this.poAPI.getAllPurchaseOrders();            if (response && response.success) {                this.purchaseOrders = response.data || [];                this.filteredPurchaseOrders = [...this.purchaseOrders];                this.renderPurchaseOrdersTable();                this.updateSupplierFilter();                this.loadStatistics();            } else {                this.purchaseOrders = [];                this.filteredPurchaseOrders = [];                this.renderPurchaseOrdersTable();                if (response && response.message && !response.message.includes('Authentication')) {                    this.showAlert('info', 'No purchase orders found. Create your first Highland Fresh PO!');                } else {                    this.showAlert('error', 'Failed to load purchase orders: ' + (response?.message || 'Unknown error'));                }            }        } catch (error) {            console.error('Error loading purchase orders:', error);            this.purchaseOrders = [];            this.filteredPurchaseOrders = [];            this.renderPurchaseOrdersTable();            const msg = this.poAPI && typeof this.poAPI.handleError === 'function'                ? this.poAPI.handleError(error)                : 'Error loading purchase orders';            this.showAlert('error', msg);            if (error && error.response && error.response.status === 401) {                setTimeout(() => { window.location.href = '../html/login.html'; }, 1500);            }        } finally {            this.showLoading(false);        }    }    async loadStatistics() {        try {            const stats = this.poAPI.generateStatistics(this.purchaseOrders);            this.updateStatisticsCards(stats);        } catch (error) {            console.error('Error loading statistics:', error);        }    }    updateStatisticsCards(stats) {        const setText = (id, value) => {            const el = document.getElementById(id);            if (el) el.textContent = value ?? 0;        };        setText('totalPOs', stats.totalPOs ?? stats.total ?? 0);        setText('pendingPOs', stats.pendingPOs ?? stats.pending ?? 0);        setText('inTransitPOs', stats.inTransitPOs ?? stats.inTransit ?? 0);        setText('receivedPOs', stats.receivedPOs ?? stats.received ?? 0);    }    renderPurchaseOrdersTable() {        const tableBody = document.getElementById('poTableBody');        if (!tableBody) return;        if (!this.filteredPurchaseOrders || this.filteredPurchaseOrders.length === 0) {            tableBody.innerHTML = `                <tr>                    <td colspan="8" class="text-center text-muted py-4">                        <i class="bi bi-inbox display-4 d-block mb-2"></i>                        <strong>No Highland Fresh Purchase Orders Found</strong><br>                        <small>Create your first dairy cooperative purchase order!</small>                    </td>                </tr>            `;            return;        }        const rowsHtml = this.filteredPurchaseOrders.map(po => {            const poId = po.purchase_order_id || po.po_id || 0;            const supplierName = po.supplier_name || po.supplier || 'Unknown Supplier';            const status = po.status || 'Pending';            const totalAmount = po.total_amount || 0;            const createdAt = po.created_at || po.order_date || new Date().toISOString();            const expectedDelivery = po.expected_delivery_date || null;            const itemsCount = po.items_count || 0;            const badgeClass = this.poAPI.getStatusBadgeClass(status);            const statusBadge = `<span class="badge ${badgeClass}">${this.escapeHtml(status)}</span>`;            const formattedDate = this.poAPI.formatDate(createdAt);            const formattedTotal = this.poAPI.formatCurrency(totalAmount);            const expectedDeliveryFormatted = expectedDelivery ?                 this.poAPI.formatDate(expectedDelivery) : 'Not specified';            return `                <tr data-po-id="${poId}" style="cursor: pointer;"                     title="Click to view Highland Fresh PO details">                    <td><strong>HF-PO-${String(poId).padStart(4, '0')}</strong></td>                    <td>                        <i class="bi bi-building-fill-gear text-success me-1"></i>                        ${this.escapeHtml(supplierName)}                    </td>                    <td>${statusBadge}</td>                    <td class="text-end">${formattedTotal}</td>                    <td>${formattedDate}</td>                    <td>${expectedDeliveryFormatted}</td>                    <td>                        <span class="badge bg-primary">${itemsCount} items</span>                    </td>                    <td>                        <div class="btn-group btn-group-sm">                            <button class="btn btn-outline-primary btn-sm"                                     onclick="window.poManager.viewPODetails(${poId}); event.stopPropagation();"                                    title="View Details">                                <i class="bi bi-eye"></i>                            </button>                            <button class="btn btn-outline-secondary btn-sm"                                     onclick="window.poManager.resendEmail(${poId}); event.stopPropagation();"                                    title="Resend Email">                                <i class="bi bi-envelope"></i>                            </button>                            ${['PO Sent', 'PO Confirmed', 'PO Partially Received'].includes(status) ? `                                <button class="btn btn-outline-success btn-sm"                                         onclick="window.poManager.showReceiveDeliveryModal(${poId}); event.stopPropagation();"                                        title="Receive Delivery">                                    <i class="bi bi-truck"></i>                                </button>                            ` : ''}                        </div>                    </td>                </tr>            `;        }).join('');        tableBody.innerHTML = rowsHtml;    }    updateSupplierFilter() {        const supplierFilter = document.getElementById('supplierFilter');        const suppliers = [...new Set(this.purchaseOrders.map(po => po.supplier_name))];        const optionsHtml = suppliers.map(supplier =>             `<option value="${this.escapeHtml(supplier)}">${this.escapeHtml(supplier)}</option>`        ).join('');        const currentValue = supplierFilter.value;        supplierFilter.innerHTML = `            <option value="">All Suppliers</option>            ${optionsHtml}        `;        supplierFilter.value = currentValue;    }    handleSearch(searchTerm) {        this.applyFilters();    }    handleFilter() {        this.applyFilters();    }    applyFilters() {    const searchBox = document.getElementById('searchPO');    const searchTerm = (searchBox ? searchBox.value : '').toLowerCase();        const statusFilter = document.getElementById('statusFilter').value;        const supplierFilter = document.getElementById('supplierFilter').value;        this.filteredPurchaseOrders = this.purchaseOrders.filter(po => {            const matchesSearch = !searchTerm ||                 po.supplier_name.toLowerCase().includes(searchTerm) ||                String(po.purchase_order_id).includes(searchTerm) ||                (po.notes && po.notes.toLowerCase().includes(searchTerm));            const matchesStatus = !statusFilter || po.status === statusFilter;            const matchesSupplier = !supplierFilter || po.supplier_name === supplierFilter;            return matchesSearch && matchesStatus && matchesSupplier;        });        this.renderPurchaseOrdersTable();    }    showCreatePOModal() {        this.poForm.showCreateModal();    }    handleRowClick(poId, event) {        if (event.target.closest('.btn-group')) {            return;        }        this.viewPODetails(poId);    }    async viewPODetails(poId) {        try {            const po = this.purchaseOrders.find(p => p.purchase_order_id == poId);            if (!po) {                this.showAlert('error', 'Purchase order not found');                return;            }            const response = await this.poAPI.getPurchaseOrderDetails(poId);            if (response.success) {                this.showPODetailsModal(response.data);            } else {                this.showAlert('error', 'Failed to load purchase order details');            }        } catch (error) {            console.error('Error viewing PO details:', error);            this.showAlert('error', 'Error loading purchase order details');        }    }    showPODetailsModal(poData) {        const poId = poData.purchase_order_id || poData.po_id || '-';        let detailsHTML = `            <div class="row mb-3">                <div class="col-md-6">                    <strong style="color: var(--text-primary);">PO Number:</strong><br>                    <span class="text-muted">PO-${String(poId).padStart(4, '0')}</span>                </div>                <div class="col-md-6">                    <strong style="color: var(--text-primary);">Status:</strong><br>                    <span class="badge ${this.getStatusBadgeClass(poData.status)}">${poData.status}</span>                </div>            </div>            <div class="row mb-3">                <div class="col-md-6">                    <strong style="color: var(--text-primary);">Supplier:</strong><br>                    <span class="text-muted">${poData.supplier_name}</span>                </div>                <div class="col-md-6">                    <strong style="color: var(--text-primary);">Total Amount:</strong><br>                    <span class="text-muted">${this.poAPI.formatCurrency(poData.total_amount)}</span>                </div>            </div>            <div class="row mb-3">                <div class="col-md-6">                    <strong style="color: var(--text-primary);">Created:</strong><br>                    <span class="text-muted">${this.poAPI.formatDate(poData.created_at)}</span>                </div>                <div class="col-md-6">                    <strong style="color: var(--text-primary);">Expected Delivery:</strong><br>                    <span class="text-muted">${poData.expected_delivery_date ? this.poAPI.formatDate(poData.expected_delivery_date) : 'Not specified'}</span>                </div>            </div>        `;        if (poData.notes) {            detailsHTML += `                <div class="mb-3">                    <strong style="color: var(--text-primary);">Notes:</strong><br>                    <span class="text-muted">${poData.notes}</span>                </div>            `;        }        if (poData.items && poData.items.length > 0) {            detailsHTML += `                <div class="mb-3">                    <strong style="color: var(--text-primary);">Items:</strong>                    <div class="table-responsive mt-2">                        <table class="table table-sm" style="border: 1px solid var(--border-color);">                            <thead style="background-color: var(--hf-light); color: var(--text-primary);">                                <tr>                                    <th>Product</th>                                    <th>Ordered</th>                                    <th>Received</th>                                    <th>Unit Cost</th>                                    <th>Total</th>                                </tr>                            </thead>                            <tbody>            `;            poData.items.forEach(item => {                const orderedQty = parseFloat(item.ordered_quantity || item.quantity || 0);                const receivedQty = parseFloat(item.received_quantity || 0);                const unitCost = parseFloat(item.unit_cost || 0);                const totalCost = orderedQty * unitCost;                detailsHTML += `                    <tr>                        <td>${item.product_name}</td>                        <td>${orderedQty}</td>                        <td>                            <span class="${receivedQty < orderedQty ? 'text-warning' : 'text-success'}">                                ${receivedQty}                                ${receivedQty < orderedQty ? ' (Partial)' : receivedQty > 0 ? ' (Complete)' : ''}                            </span>                        </td>                        <td>${this.poAPI.formatCurrency(unitCost)}</td>                        <td>${this.poAPI.formatCurrency(totalCost)}</td>                    </tr>                `;            });            detailsHTML += `                            </tbody>                        </table>                    </div>                </div>            `;        }        document.getElementById('poDetailsContent').innerHTML = detailsHTML;        const modal = new bootstrap.Modal(document.getElementById('poDetailsModal'));        modal.show();    }    getStatusBadgeClass(status) {        switch(status) {            case 'Draft':                return 'bg-secondary';            case 'PO Sent':                return 'bg-warning text-dark';            case 'PO Partially Received':                return 'bg-info text-dark';            case 'PO Received':                return 'bg-success';            case 'Cancelled':                return 'bg-danger';            default:                return 'bg-secondary';        }    }    async resendEmail(poId) {        try {            const response = await this.poAPI.resendPurchaseOrderEmail(poId);            if (response.success) {                this.showAlert('success', 'Email sent successfully');            } else {                this.showAlert('error', 'Failed to send email: ' + response.message);            }        } catch (error) {            console.error('Error resending email:', error);            this.showAlert('error', 'Error sending email');        }    }    async markAsReceived(poId) {        try {            const confirmation = confirm('Mark this purchase order as received? This action cannot be undone.');            if (!confirmation) return;            const response = await this.poAPI.updatePurchaseOrderStatus(poId, 'received');            if (response.success) {                this.showAlert('success', 'Purchase order marked as received');                await this.refreshData();            } else {                this.showAlert('error', 'Failed to update status: ' + response.message);            }        } catch (error) {            console.error('Error updating status:', error);            this.showAlert('error', 'Error updating purchase order status');        }    }    async showReceiveDeliveryModal(poId) {        try {            const response = await this.poAPI.getPurchaseOrderDetails(poId);            if (!response.success) {                this.showAlert('error', 'Failed to load purchase order details: ' + response.message);                return;            }            const po = response.data;            this.currentReceivingPO = po;            const modalTitle = document.getElementById('receiveDeliveryModalLabel');            modalTitle.textContent = `Receive Delivery - ${po.po_number}`;            document.getElementById('receiveSupplierName').textContent = po.supplier_name;            document.getElementById('receiveOrderDate').textContent = this.poAPI.formatDate(po.order_date);            document.getElementById('receiveExpectedDate').textContent = po.expected_delivery_date ?                 this.poAPI.formatDate(po.expected_delivery_date) : 'Not specified';            this.populateReceiveItemsTable(po.items);            const modal = new bootstrap.Modal(document.getElementById('receiveDeliveryModal'));            modal.show();        } catch (error) {            console.error('Error loading PO details:', error);            this.showAlert('error', 'Error loading purchase order details');        }    }    populateReceiveItemsTable(items) {        const tableBody = document.getElementById('receiveItemsTableBody');        const rowsHtml = items.map(item => {            const orderedQty = parseFloat(item.ordered_quantity);            const receivedQty = parseFloat(item.received_quantity || 0);            const remainingQty = orderedQty - receivedQty;            return `                <tr data-item-id="${item.po_item_id}">                    <td>${this.escapeHtml(item.product_name)}</td>                    <td class="text-center">${orderedQty.toFixed(3)}</td>                    <td class="text-center">${receivedQty.toFixed(3)}</td>                    <td class="text-center">${remainingQty.toFixed(3)}</td>                    <td>                        <input type="number"                                class="form-control receive-quantity-input"                                data-item-id="${item.po_item_id}"                               min="0"                                max="${remainingQty}"                                step="0.001"                                value="0"                               placeholder="0.000">                    </td>                </tr>            `;        }).join('');        tableBody.innerHTML = rowsHtml;    }    async processDeliveryReceipt() {        try {            const items = [];            const receiveInputs = document.querySelectorAll('.receive-quantity-input');            receiveInputs.forEach(input => {                const quantity = parseFloat(input.value) || 0;                if (quantity > 0) {                    items.push({                        po_item_id: parseInt(input.dataset.itemId),                        received_quantity: quantity                    });                }            });            if (items.length === 0) {                this.showAlert('warning', 'Please enter at least one received quantity');                return;            }            const response = await this.poAPI.receiveDelivery(this.currentReceivingPO.po_id, { items });            if (response.success) {                console.log('Delivery response:', response);                this.showAlert('success', 'Delivery received successfully');                const modal = bootstrap.Modal.getInstance(document.getElementById('receiveDeliveryModal'));                modal.hide();                await this.refreshData();            } else {                this.showAlert('error', 'Failed to process delivery: ' + response.message);            }        } catch (error) {            console.error('Error processing delivery:', error);            this.showAlert('error', 'Error processing delivery receipt');        }    }    async refreshData() {        try {            await this.loadInitialData();            this.showAlert('success', 'Data refreshed successfully');        } catch (error) {            console.error('Error refreshing data:', error);            this.showAlert('error', 'Error refreshing data');        }    }    showLoading(show) {    const loadingElement = document.getElementById('loadingSpinner');        const tableContainer = document.getElementById('poTableContainer');    const emptyState = document.getElementById('emptyState');    if (loadingElement && tableContainer) {            if (show) {                loadingElement.classList.remove('d-none');                tableContainer.style.opacity = '0.5';        if (emptyState) emptyState.classList.add('d-none');            } else {                loadingElement.classList.add('d-none');                tableContainer.style.opacity = '1';            }        }    }    showAlert(type, message) {        this.poForm.showAlert(type, message);    }    escapeHtml(unsafe) {        if (!unsafe) return '';        return String(unsafe)            .replace(/&/g, "&amp;")            .replace(/</g, "&lt;")            .replace(/>/g, "&gt;")            .replace(/"/g, "&quot;")            .replace(/'/g, "&#039;");    }    handleDeepLinking() {        if (location.hash === '#receive') {            const statusFilter = document.getElementById('statusFilter');            if (statusFilter) {                const preferred = ['PO Sent', 'PO Confirmed', 'PO Partially Received'];                const match = [...statusFilter.options].find(o => preferred.includes(o.value));                if (match) statusFilter.value = match.value;                this.handleFilter();            }            this.showAlert('info', 'Receiving mode: filter applied. Open a PO and click "Mark as Received" when goods arrive.');        } else if (location.hash === '#create') {            try {                this.showCreatePOModal();            } catch (e) {                console.warn('Deferred open of create modal; retrying shortly.');                setTimeout(() => this.showCreatePOModal(), 300);            }        }    }}