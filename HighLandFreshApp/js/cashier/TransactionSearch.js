class TransactionSearch {    constructor() {        this.searchHistory = this.loadSearchHistory();        this.searchSuggestions = [];        this.isSearching = false;    }    static init() {        window.transactionSearch = new TransactionSearch();        window.transactionSearch.setupSearchFeatures();    }    setupSearchFeatures() {        this.setupSearchAutocomplete();        this.setupSearchHistory();        this.setupQuickFilters();        this.setupKeyboardShortcuts();    }    setupSearchAutocomplete() {        const searchInput = document.getElementById('searchInput');        const autocompleteDiv = document.createElement('div');        autocompleteDiv.id = 'searchAutocomplete';        autocompleteDiv.className = 'dropdown-menu position-absolute w-100';        autocompleteDiv.style.display = 'none';        autocompleteDiv.style.maxHeight = '200px';        autocompleteDiv.style.overflowY = 'auto';        autocompleteDiv.style.zIndex = '1050';        searchInput.parentNode.style.position = 'relative';        searchInput.parentNode.appendChild(autocompleteDiv);        searchInput.addEventListener('input', (e) => {            const query = e.target.value.trim();            if (query.length >= 2) {                this.showSearchSuggestions(query);            } else {                this.hideSearchSuggestions();            }        });        searchInput.addEventListener('focus', () => {            if (searchInput.value.trim().length >= 2) {                this.showSearchSuggestions(searchInput.value.trim());            }        });        searchInput.addEventListener('blur', () => {            setTimeout(() => this.hideSearchSuggestions(), 200);        });        searchInput.addEventListener('keydown', (e) => {            const suggestions = autocompleteDiv.querySelectorAll('.dropdown-item');            const activeIndex = Array.from(suggestions).findIndex(item =>                 item.classList.contains('active'));            if (e.key === 'ArrowDown') {                e.preventDefault();                if (activeIndex < suggestions.length - 1) {                    this.setActiveSuggestion(suggestions, activeIndex + 1);                }            } else if (e.key === 'ArrowUp') {                e.preventDefault();                if (activeIndex > 0) {                    this.setActiveSuggestion(suggestions, activeIndex - 1);                }            } else if (e.key === 'Enter') {                if (activeIndex >= 0) {                    e.preventDefault();                    suggestions[activeIndex].click();                }            } else if (e.key === 'Escape') {                this.hideSearchSuggestions();            }        });    }    async showSearchSuggestions(query) {        const autocompleteDiv = document.getElementById('searchAutocomplete');        try {            const suggestions = this.generateSearchSuggestions(query);            if (suggestions.length > 0) {                autocompleteDiv.innerHTML = suggestions.map(suggestion => `                    <a class="dropdown-item" href="#" onclick="transactionSearch.selectSuggestion('${suggestion.value}', '${suggestion.type}')">                        <i class="fas fa-${suggestion.icon} me-2"></i>                        <span>${suggestion.label}</span>                        <small class="text-muted ms-auto">${suggestion.type}</small>                    </a>                `).join('');                autocompleteDiv.style.display = 'block';            } else {                this.hideSearchSuggestions();            }        } catch (error) {            console.error('Error showing search suggestions:', error);        }    }    generateSearchSuggestions(query) {        const suggestions = [];        const queryLower = query.toLowerCase();        this.searchHistory.forEach(historyItem => {            if (historyItem.toLowerCase().includes(queryLower)) {                suggestions.push({                    value: historyItem,                    label: historyItem,                    type: 'Recent Search',                    icon: 'history'                });            }        });        if (/^sale/i.test(query)) {            suggestions.push({                value: query,                label: `Search sale numbers: "${query}"`,                type: 'Sale Number',                icon: 'receipt'            });        }        if (/^\d{11}$/.test(query)) {            suggestions.push({                value: query,                label: `Search phone number: ${query}`,                type: 'Phone Number',                icon: 'phone'            });        }        if (/^\d{4}-\d{2}-\d{2}$/.test(query)) {            suggestions.push({                value: query,                label: `Search date: ${query}`,                type: 'Date',                icon: 'calendar'            });        }        return suggestions.slice(0, 5);    }    setActiveSuggestion(suggestions, index) {        suggestions.forEach(item => item.classList.remove('active'));        if (suggestions[index]) {            suggestions[index].classList.add('active');        }    }    selectSuggestion(value, type) {        const searchInput = document.getElementById('searchInput');        searchInput.value = value;        this.addToSearchHistory(value);        window.transactionHistory.currentFilters.search = value;        window.transactionHistory.applyFilters();        this.hideSearchSuggestions();    }    hideSearchSuggestions() {        const autocompleteDiv = document.getElementById('searchAutocomplete');        if (autocompleteDiv) {            autocompleteDiv.style.display = 'none';        }    }    setupSearchHistory() {        const searchInput = document.getElementById('searchInput');        const originalApplyFilters = window.transactionHistory.applyFilters;        window.transactionHistory.applyFilters = () => {            const searchValue = searchInput.value.trim();            if (searchValue) {                this.addToSearchHistory(searchValue);            }            originalApplyFilters.call(window.transactionHistory);        };    }    setupQuickFilters() {        const filtersContainer = document.querySelector('.card-body .row.mt-3');        if (filtersContainer) {            const quickFiltersDiv = document.createElement('div');            quickFiltersDiv.className = 'col-12 mt-2';            quickFiltersDiv.innerHTML = `                <div class="d-flex flex-wrap gap-2">                    <small class="text-muted align-self-center me-2">Quick Filters:</small>                    <button class="btn btn-outline-success btn-sm" onclick="transactionSearch.applyQuickFilter('today')">                        <i class="fas fa-calendar-day"></i> Today                    </button>                    <button class="btn btn-outline-info btn-sm" onclick="transactionSearch.applyQuickFilter('yesterday')">                        <i class="fas fa-calendar-minus"></i> Yesterday                    </button>                    <button class="btn btn-outline-warning btn-sm" onclick="transactionSearch.applyQuickFilter('week')">                        <i class="fas fa-calendar-week"></i> This Week                    </button>                    <button class="btn btn-outline-primary btn-sm" onclick="transactionSearch.applyQuickFilter('month')">                        <i class="fas fa-calendar-alt"></i> This Month                    </button>                    <button class="btn btn-outline-success btn-sm" onclick="transactionSearch.applyQuickFilter('cash')">                        <i class="fas fa-money-bill-wave"></i> Cash Only                    </button>                    <button class="btn btn-outline-info btn-sm" onclick="transactionSearch.applyQuickFilter('large')">                        <i class="fas fa-peso-sign"></i> Large Sales                    </button>                </div>            `;            filtersContainer.appendChild(quickFiltersDiv);        }    }    applyQuickFilter(filterType) {        const today = moment();        switch (filterType) {            case 'today':                this.setDateRange(today, today);                break;            case 'yesterday':                const yesterday = moment().subtract(1, 'day');                this.setDateRange(yesterday, yesterday);                break;            case 'week':                const weekStart = moment().startOf('week');                this.setDateRange(weekStart, today);                break;            case 'month':                const monthStart = moment().startOf('month');                this.setDateRange(monthStart, today);                break;            case 'cash':                document.getElementById('paymentMethodFilter').value = '1';                 window.transactionHistory.currentFilters.paymentMethodId = '1';                break;            case 'large':                document.getElementById('searchInput').value = 'amount:>1000';                window.transactionHistory.currentFilters.search = 'amount:>1000';                break;        }        window.transactionHistory.applyFilters();    }    setDateRange(startDate, endDate) {        const dateRange = $('#dateRange');        const formatString = 'YYYY-MM-DD';        window.transactionHistory.currentFilters.dateFrom = startDate.format(formatString);        window.transactionHistory.currentFilters.dateTo = endDate.format(formatString);        dateRange.val(startDate.format(formatString) + ' - ' + endDate.format(formatString));    }    setupKeyboardShortcuts() {        document.addEventListener('keydown', (e) => {            if (e.ctrlKey && e.key === 'f') {                e.preventDefault();                document.getElementById('searchInput').focus();            }            if (e.ctrlKey && e.key === 'k') {                e.preventDefault();                this.showQuickFilterMenu();            }            if (e.key === 'Escape' && document.activeElement.id === 'searchInput') {                document.getElementById('searchInput').value = '';                window.transactionHistory.currentFilters.search = '';                window.transactionHistory.applyFilters();            }        });    }    showQuickFilterMenu() {        document.getElementById('searchInput').focus();    }    parseAdvancedSearch(query) {        const filters = {            search: '',            dateFrom: '',            dateTo: '',            amountMin: '',            amountMax: '',            paymentMethod: ''        };        const patterns = {            amount: /amount:([\d.]+)(?:-([\d.]+))?/g,            date: /date:(\d{4}-\d{2}-\d{2})(?:-(\d{4}-\d{2}-\d{2}))?/g,            payment: /payment:(\w+)/g,            customer: /customer:(.+?)(?:\s|$)/g        };        let remainingQuery = query;        let match;        while ((match = patterns.amount.exec(query)) !== null) {            filters.amountMin = match[1];            if (match[2]) {                filters.amountMax = match[2];            }            remainingQuery = remainingQuery.replace(match[0], '').trim();        }        patterns.date.lastIndex = 0;        while ((match = patterns.date.exec(query)) !== null) {            filters.dateFrom = match[1];            if (match[2]) {                filters.dateTo = match[2];            }            remainingQuery = remainingQuery.replace(match[0], '').trim();        }        patterns.payment.lastIndex = 0;        while ((match = patterns.payment.exec(query)) !== null) {            filters.paymentMethod = match[1];            remainingQuery = remainingQuery.replace(match[0], '').trim();        }        filters.search = remainingQuery.trim();        return filters;    }    addToSearchHistory(searchTerm) {        if (!searchTerm || searchTerm.length < 2) return;        this.searchHistory = this.searchHistory.filter(item => item !== searchTerm);        this.searchHistory.unshift(searchTerm);        this.searchHistory = this.searchHistory.slice(0, 10);        this.saveSearchHistory();    }    loadSearchHistory() {        try {            const history = localStorage.getItem('transactionSearchHistory');            return history ? JSON.parse(history) : [];        } catch (error) {            console.error('Error loading search history:', error);            return [];        }    }    saveSearchHistory() {        try {            localStorage.setItem('transactionSearchHistory', JSON.stringify(this.searchHistory));        } catch (error) {            console.error('Error saving search history:', error);        }    }    clearSearchHistory() {        this.searchHistory = [];        this.saveSearchHistory();    }    async exportSearchResults(format = 'csv') {        try {            const transactions = window.transactionHistory.transactions;            if (transactions.length === 0) {                window.transactionHistory.showError('No transactions to export');                return;            }            if (format === 'csv') {                this.exportToCSV(transactions);            } else if (format === 'excel') {                this.exportToExcel(transactions);            }            window.transactionHistory.showSuccess(`Exported ${transactions.length} transactions`);        } catch (error) {            console.error('Error exporting transactions:', error);            window.transactionHistory.showError('Failed to export transactions');        }    }    exportToCSV(transactions) {        const headers = [            'Sale Number', 'Date', 'Time', 'Customer Name', 'Customer Phone',            'Items Count', 'Payment Method', 'Subtotal', 'Tax', 'Discount', 'Total', 'Status'        ];        const csvContent = [            headers.join(','),            ...transactions.map(t => [                t.sale_number,                window.transactionHistory.formatDate(t.sale_date),                window.transactionHistory.formatTime(t.sale_date),                t.customer_name || '',                t.customer_phone || '',                t.item_count,                t.payment_method,                t.subtotal,                t.tax_amount,                t.discount_amount,                t.total_amount,                t.status            ].map(field => `"${field}"`).join(','))        ].join('\n');        this.downloadFile(csvContent, 'transaction-history.csv', 'text/csv');    }    downloadFile(content, filename, mimeType) {        const blob = new Blob([content], { type: mimeType });        const url = URL.createObjectURL(blob);        const link = document.createElement('a');        link.href = url;        link.download = filename;        document.body.appendChild(link);        link.click();        document.body.removeChild(link);        URL.revokeObjectURL(url);    }}window.TransactionSearch = TransactionSearch;