class ReturnsAPI {    constructor() {        this.baseUrl = '../api/ReturnsAPI.php';    }    async createReturn(returnData) {        try {            const response = await fetch(this.baseUrl, {                method: 'POST',                headers: {                    'Content-Type': 'application/json'                },                credentials: 'include',                body: JSON.stringify(returnData)            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to create return');            }            return result;        } catch (error) {            console.error('Create return error:', error);            throw error;        }    }    async findSaleByReceipt(receiptNumber) {        try {            const url = `${this.baseUrl}?operation=findSaleByReceipt&receipt_number=${encodeURIComponent(receiptNumber)}`;            const response = await fetch(url, {                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Sale not found');            }            return result.data;        } catch (error) {            console.error('Find sale error:', error);            throw error;        }    }    async getEligibleSales() {        try {            const url = `${this.baseUrl}?operation=getEligibleSales`;            const response = await fetch(url, {                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to retrieve eligible sales');            }            return result.data;        } catch (error) {            console.error('Get eligible sales error:', error);            throw error;        }    }    async getReturnHistory(filters = {}) {        try {            const params = new URLSearchParams({                operation: 'getReturnHistory',                ...filters            });            const url = `${this.baseUrl}?${params}`;            const response = await fetch(url, {                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to retrieve return history');            }            return result.data;        } catch (error) {            console.error('Get return history error:', error);            throw error;        }    }    async getReturnDetails(returnId) {        try {            const url = `${this.baseUrl}?operation=getReturnDetails&return_id=${returnId}`;            const response = await fetch(url, {                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to retrieve return details');            }            return result.data;        } catch (error) {            console.error('Get return details error:', error);            throw error;        }    }    async approveReturn(returnId) {        try {            const url = `${this.baseUrl}?operation=approveReturn&return_id=${returnId}`;            const response = await fetch(url, {                method: 'POST',                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to approve return');            }            return result;        } catch (error) {            console.error('Approve return error:', error);            throw error;        }    }    async rejectReturn(returnId) {        try {            const url = `${this.baseUrl}?operation=rejectReturn&return_id=${returnId}`;            const response = await fetch(url, {                method: 'POST',                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to reject return');            }            return result;        } catch (error) {            console.error('Reject return error:', error);            throw error;        }    }    async getAllReturns() {        try {            const response = await fetch(this.baseUrl, {                credentials: 'include'            });            const result = await response.json();            if (!result.success) {                throw new Error(result.message || 'Failed to retrieve returns');            }            return result.data;        } catch (error) {            console.error('Get all returns error:', error);            throw error;        }    }}if (typeof module !== 'undefined' && module.exports) {    module.exports = ReturnsAPI;} else {    window.ReturnsAPI = ReturnsAPI;}