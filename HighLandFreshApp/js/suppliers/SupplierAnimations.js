class SupplierAnimations {    constructor(renderer) {        this.renderer = renderer;    }    animateSupplierAdd(supplier) {        this.renderer.addSupplierToTable(supplier);    }    animateSupplierUpdate(supplier) {        return this.renderer.updateSupplierRow(supplier);    }    animateSupplierDelete(supplierId, callback) {        return this.renderer.removeSupplierRow(supplierId, callback);    }    animateTableLoad(suppliers) {        if (suppliers.length === 0) {            this.renderer.showNoSuppliersMessage();            return;        }        const emptyState = this.renderer.emptyState;        if (emptyState) {            emptyState.classList.add('d-none');        }        const tableBody = this.renderer.tableBody;        if (tableBody) {            tableBody.innerHTML = suppliers.map((supplier, index) => `                <tr data-supplier-id="${supplier.supplier_id}" class="row-adding" style="animation-delay: ${index * 0.1}s">                    ${this.renderer.createSupplierRowContent(supplier)}                </tr>            `).join('');            setTimeout(() => {                const rows = tableBody.querySelectorAll('tr.row-adding');                rows.forEach(row => row.classList.remove('row-adding'));            }, 1000);        }    }    pulseRow(supplierId, color = '#d4edda') {        const row = document.querySelector(`tr[data-supplier-id="${supplierId}"]`);        if (row) {            row.style.transition = 'background-color 0.3s ease';            row.style.backgroundColor = color;            setTimeout(() => {                row.style.backgroundColor = '';            }, 1000);        }    }    fadeOut(element, callback, duration = 300) {        if (!element) return;        element.style.transition = `opacity ${duration}ms ease-out`;        element.style.opacity = '0';        setTimeout(() => {            if (callback) callback();        }, duration);    }    fadeIn(element, duration = 300) {        if (!element) return;        element.style.opacity = '0';        element.style.transition = `opacity ${duration}ms ease-in`;        element.offsetHeight;        element.style.opacity = '1';    }    slideDown(element, duration = 300) {        if (!element) return;        element.style.overflow = 'hidden';        element.style.height = '0';        element.style.transition = `height ${duration}ms ease-out`;        element.offsetHeight;        const height = element.scrollHeight;        element.style.height = height + 'px';        setTimeout(() => {            element.style.height = '';            element.style.overflow = '';            element.style.transition = '';        }, duration);    }    slideUp(element, callback, duration = 400) {        if (!element) return;        const height = element.offsetHeight;        const computedStyle = window.getComputedStyle(element);        const paddingTop = parseFloat(computedStyle.paddingTop);        const paddingBottom = parseFloat(computedStyle.paddingBottom);        const marginTop = parseFloat(computedStyle.marginTop);        const marginBottom = parseFloat(computedStyle.marginBottom);        element.style.transition = `            height ${duration}ms ease-out,            padding-top ${duration}ms ease-out,            padding-bottom ${duration}ms ease-out,            margin-top ${duration}ms ease-out,            margin-bottom ${duration}ms ease-out,            opacity ${Math.round(duration * 0.7)}ms ease-out        `;        element.style.overflow = 'hidden';        element.style.height = height + 'px';        element.style.paddingTop = paddingTop + 'px';        element.style.paddingBottom = paddingBottom + 'px';        element.style.marginTop = marginTop + 'px';        element.style.marginBottom = marginBottom + 'px';        element.offsetHeight;        element.style.height = '0';        element.style.paddingTop = '0';        element.style.paddingBottom = '0';        element.style.marginTop = '0';        element.style.marginBottom = '0';        element.style.opacity = '0';        setTimeout(() => {            if (callback) callback();        }, duration);    }}