class SupplierAPI {    constructor() {        this.suppliersUrl = APIResponseHandler.getApiUrl('SuppliersAPI.php');        this.paymentTermsUrl = APIResponseHandler.getApiUrl('PaymentTermsAPI.php');        this.countriesUrl = APIResponseHandler.getApiUrl('CountriesAPI.php');        this.citiesUrl = APIResponseHandler.getApiUrl('CitiesAPI.php');        this.#configureAxios();    }    #configureAxios() {        axios.defaults.withCredentials = true;    }    async loadSuppliers() {        try {            const response = await axios.get(this.suppliersUrl);            if (response.data.success) {                return response.data.data;            } else {                throw new Error(response.data.message || 'Failed to load suppliers');            }        } catch (error) {            console.error('Error loading suppliers:', error);            throw error;        }    }    async loadPaymentTerms() {        try {            const response = await axios.get(this.paymentTermsUrl);            if (response.data.success) {                return response.data.data;            } else {                throw new Error(response.data.message || 'Failed to load payment terms');            }        } catch (error) {            console.error('Error loading payment terms:', error);            throw error;        }    }    async loadCountries() {        try {            const response = await axios.get(this.countriesUrl);            if (response.data.success) {                return response.data.data;            } else {                throw new Error(response.data.message || 'Failed to load countries');            }        } catch (error) {            console.error('Error loading countries:', error);            throw error;        }    }    async loadCities(countryId = null) {        try {            let url = this.citiesUrl;            if (countryId) {                url += `?country_id=${countryId}`;            }            const response = await axios.get(url);            if (response.data.success) {                return response.data.data;            } else {                throw new Error(response.data.message || 'Failed to load cities');            }        } catch (error) {            console.error('Error loading cities:', error);            throw error;        }    }    async createSupplier(supplierData) {        try {            const response = await axios.post(this.suppliersUrl, supplierData);            if (response.data.success) {                return response.data;            } else {                throw new Error(response.data.message || 'Failed to create supplier');            }        } catch (error) {            console.error('Error creating supplier:', error);            throw error;        }    }    async updateSupplier(supplierId, supplierData) {        try {            const response = await axios.put(`${this.suppliersUrl}?id=${supplierId}`, supplierData);            if (response.data.success) {                return response.data;            } else {                throw new Error(response.data.message || 'Failed to update supplier');            }        } catch (error) {            console.error('Error updating supplier:', error);            throw error;        }    }    async deleteSupplier(supplierId) {        try {            const response = await axios.delete(`${this.suppliersUrl}?id=${supplierId}`);            if (response.data.success) {                return response.data;            } else {                throw new Error(response.data.message || 'Failed to delete supplier');            }        } catch (error) {            console.error('Error deleting supplier:', error);            throw error;        }    }}