class SupplierManager {    constructor() {        this.suppliers = [];        this.paymentTerms = [];        this.countries = [];        this.cities = [];        try {            console.log('Initializing SupplierAPI...');            this.api = new SupplierAPI();            console.log('SupplierAPI initialized successfully');            console.log('Initializing SupplierRenderer...');            this.renderer = new SupplierRenderer();            console.log('SupplierRenderer initialized successfully');            console.log('Initializing SupplierAnimations...');            this.animations = new SupplierAnimations(this.renderer);            console.log('SupplierAnimations initialized successfully');            console.log('Initializing SupplierModal...');            this.modal = new SupplierModal(this);            console.log('SupplierModal initialized successfully');        } catch (error) {            console.error('Error during SupplierManager initialization:', error);            throw error;        }        window.supplierManager = this;        this.initialize();    }    initialize() {        console.log('SupplierManager initialized');        this._loadInitialData();    }    init() {        return this.initialize();    }    async _loadInitialData() {        try {            this.renderer.showLoadingSpinner(true);            const [suppliers, paymentTerms, countries, cities] = await Promise.all([                this.api.loadSuppliers(),                this.api.loadPaymentTerms(),                this.api.loadCountries(),                this.api.loadCities()             ]);            this.suppliers = suppliers;            this.paymentTerms = paymentTerms;            this.countries = countries;            this.cities = cities;            this.renderer.renderSuppliersTable(this.suppliers);            this._populatePaymentTermsDropdown();            this._populateCountriesDropdown();            this._populateCitiesDropdown();            this._setupCountryChangeHandler();            console.log(`Loaded ${this.suppliers.length} suppliers, ${this.paymentTerms.length} payment terms, ${this.countries.length} countries, and ${this.cities.length} cities successfully`);        } catch (error) {            console.error('Error loading initial data:', error);            this.handleApiError(error, 'Failed to load data');            this.renderer.showNoSuppliersMessage();        } finally {            this.renderer.showLoadingSpinner(false);        }    }    _populatePaymentTermsDropdown() {        const paymentTermsSelect = document.getElementById('paymentTerms');        if (!paymentTermsSelect) return;        paymentTermsSelect.innerHTML = '<option value="">Select payment terms...</option>';        this.paymentTerms.forEach(term => {            const option = document.createElement('option');            option.value = term.payment_term_id;            option.textContent = `${term.term_name} (${term.days_to_pay} days)`;            option.dataset.termCode = term.term_code;            paymentTermsSelect.appendChild(option);        });    }    _populateCountriesDropdown() {        const countriesSelect = document.getElementById('supplierCountry');        if (!countriesSelect) return;        countriesSelect.innerHTML = '<option value="">Select country...</option>';        this.countries.forEach(country => {            const option = document.createElement('option');            option.value = country.country_id;            option.textContent = country.country_name;            option.dataset.countryCode = country.country_code;            option.dataset.phonePrefix = country.phone_prefix;            countriesSelect.appendChild(option);        });    }    _populateCitiesDropdown(countryId = null) {        const citiesSelect = document.getElementById('supplierCity');        if (!citiesSelect) return;        citiesSelect.innerHTML = '<option value="">Select city...</option>';        let citiesToShow = this.cities;        if (countryId) {            citiesToShow = this.cities.filter(city => city.country_id == countryId);        }        citiesToShow.forEach(city => {            const option = document.createElement('option');            option.value = city.city_id;            option.textContent = city.region ? `${city.city_name}, ${city.region}` : city.city_name;            option.dataset.postalPattern = city.postal_code_pattern || '';            citiesSelect.appendChild(option);        });        citiesSelect.disabled = citiesToShow.length === 0;    }    _setupCountryChangeHandler() {        const countriesSelect = document.getElementById('supplierCountry');        const postalCodeInput = document.getElementById('postalCode');        if (!countriesSelect) return;        countriesSelect.addEventListener('change', async (e) => {            const countryId = e.target.value;            if (countryId) {                this._populateCitiesDropdown(countryId);                const selectedOption = e.target.selectedOptions[0];                const phonePrefix = selectedOption.dataset.phonePrefix;                const phoneInput = document.getElementById('phoneNumber');                if (phoneInput && phonePrefix) {                    phoneInput.placeholder = `${phonePrefix}-xxx-xxxxxxx`;                }            } else {                this._populateCitiesDropdown();                const phoneInput = document.getElementById('phoneNumber');                if (phoneInput) {                    phoneInput.placeholder = '+63-xxx-xxxxxxx';                }            }        });        const citiesSelect = document.getElementById('supplierCity');        if (citiesSelect && postalCodeInput) {            citiesSelect.addEventListener('change', (e) => {                const selectedOption = e.target.selectedOptions[0];                if (selectedOption && selectedOption.dataset.postalPattern) {                    postalCodeInput.placeholder = `e.g., ${selectedOption.dataset.postalPattern}`;                } else {                    postalCodeInput.placeholder = 'e.g., 1100';                }            });        }    }    async loadSuppliers() {        await this._loadInitialData();    }    openAddSupplierModal() {        this.modal.openAddSupplierModal();    }    editSupplier(supplierId) {        const supplier = this.suppliers.find(s => s.supplier_id === supplierId);        if (!supplier) {            this.renderer.showAlert('error', 'Supplier not found');            return;        }        this.modal.openEditSupplierModal(supplier);    }    deleteSupplier(supplierId) {        const supplier = this.suppliers.find(s => s.supplier_id === supplierId);        if (!supplier) {            this.renderer.showAlert('error', 'Supplier not found');            return;        }        this.modal.showDeleteConfirmation(supplier);    }    async saveSupplier() {        if (!this.modal) {            console.error('Modal not initialized in SupplierManager');            return;        }        await this.modal.saveSupplier();    }    async confirmDeleteSupplier() {        await this.modal.confirmDeleteSupplier();    }    updateSupplierInArray(updatedSupplier) {        const supplierIndex = this.suppliers.findIndex(s => s.supplier_id == updatedSupplier.supplier_id);        if (supplierIndex !== -1) {            this.suppliers[supplierIndex] = updatedSupplier;        }    }    handleApiError(error, defaultMessage) {        let message = defaultMessage;        if (error.response && error.response.data && error.response.data.message) {            message = error.response.data.message;        } else if (error.message) {            message = error.message;        }        this.renderer.showAlert('error', message);    }}document.addEventListener('DOMContentLoaded', function() {    console.log('Supplier management page loaded');    new SupplierManager();});window.openAddSupplierModal = function() {    if (window.supplierManager) {        window.supplierManager.openAddSupplierModal();    }};window.saveSupplier = function() {    if (window.supplierManager) {        window.supplierManager.saveSupplier();    }};window.confirmDeleteSupplier = function() {    if (window.supplierManager) {        window.supplierManager.confirmDeleteSupplier();    }};