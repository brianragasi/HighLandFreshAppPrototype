class SupplierRenderer {    constructor() {        this.tableBody = document.getElementById('suppliersTableBody');        this.emptyState = document.getElementById('emptyState');        this.tableContainer = document.querySelector('.table-container');    }    renderSuppliersTable(suppliers) {        if (suppliers.length === 0) {            this.showNoSuppliersMessage();            return;        }        this.emptyState.classList.add('d-none');        this.tableBody.innerHTML = suppliers.map((supplier, index) => `            <tr data-supplier-id="${supplier.supplier_id}" class="row-adding" style="animation-delay: ${index * 0.1}s">                ${this.createSupplierRowContent(supplier)}            </tr>        `).join('');        setTimeout(() => {            const rows = this.tableBody.querySelectorAll('tr.row-adding');            rows.forEach(row => row.classList.remove('row-adding'));        }, 1000);    }    createSupplierRowContent(supplier) {        const paymentTerms = supplier.term_name || 'N/A';        let location = '';        const locationParts = [];        if (supplier.address && supplier.address.trim()) {            locationParts.push(supplier.address.trim());        }        if (supplier.city_name && supplier.country_name) {            locationParts.push(`${supplier.city_name}, ${supplier.country_name}`);        } else if (supplier.country_name) {            locationParts.push(supplier.country_name);        } else if (supplier.city_name) {            locationParts.push(supplier.city_name);        }        location = locationParts.length > 0 ? locationParts.join(', ') : 'N/A';        const supplierType = supplier.supplier_type || 'Other';        let dairyInfo = '';        if (supplierType === 'Dairy Cooperative' || supplierType === 'Individual Farm') {            const dairyParts = [];            if (supplier.daily_milk_capacity_liters) {                dairyParts.push(`${supplier.daily_milk_capacity_liters}L/day`);            }            if (supplier.milk_quality_grade && supplier.milk_quality_grade !== 'Grade A') {                dairyParts.push(supplier.milk_quality_grade);            }            if (supplier.is_nmfdc_member) {                dairyParts.push('NMFDC Member');            }            if (supplier.cooperative_code) {                dairyParts.push(`Code: ${supplier.cooperative_code}`);            }            dairyInfo = dairyParts.length > 0 ? `<small class="text-success d-block">${dairyParts.join(' â€¢ ')}</small>` : '';        }        return `            <td>                <strong>${this.escapeHtml(supplier.name)}</strong>                ${dairyInfo}            </td>            <td>                <span class="badge ${this.getSupplierTypeBadgeClass(supplierType)}">${this.escapeHtml(supplierType)}</span>            </td>            <td>${this.escapeHtml(supplier.contact_person)}</td>            <td>${this.escapeHtml(supplier.phone_number)}</td>            <td>                ${supplier.daily_milk_capacity_liters ? `${supplier.daily_milk_capacity_liters}L` : 'N/A'}                ${supplier.milk_quality_grade && supplier.milk_quality_grade !== 'Grade A' ? `<br><small class="text-muted">${supplier.milk_quality_grade}</small>` : ''}            </td>            <td>                <small class="text-muted">${this.escapeHtml(location)}</small>                <br><small class="text-muted">${this.escapeHtml(paymentTerms)}</small>            </td>            <td>                ${supplier.is_nmfdc_member ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-secondary">No</span>'}                ${supplier.cooperative_code ? `<br><small class="text-muted">Code: ${this.escapeHtml(supplier.cooperative_code)}</small>` : ''}            </td>            <td>                <div class="btn-group" role="group">                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="supplierManager.editSupplier(${supplier.supplier_id})" title="Edit Supplier">                        <i class="bi bi-pencil"></i>                    </button>                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="supplierManager.deleteSupplier(${supplier.supplier_id})" title="Delete Supplier">                        <i class="bi bi-trash"></i>                    </button>                </div>            </td>        `;    }    addSupplierToTable(supplier) {        if (!this.tableBody) {            console.error('Table body not found');            return;        }        const row = document.createElement('tr');        row.className = 'row-adding';        row.setAttribute('data-supplier-id', supplier.supplier_id);        row.innerHTML = this.createSupplierRowContent(supplier);        this.tableBody.insertBefore(row, this.tableBody.firstChild);        if (this.emptyState && !this.emptyState.classList.contains('d-none')) {            this.emptyState.classList.add('d-none');        }        if (this.tableContainer && this.tableContainer.classList.contains('d-none')) {            this.tableContainer.classList.remove('d-none');        }        setTimeout(() => {            row.classList.remove('row-adding');        }, 600);    }    updateSupplierRow(supplier) {        const row = document.querySelector(`tr[data-supplier-id="${supplier.supplier_id}"]`);        if (row) {            row.innerHTML = this.createSupplierRowContent(supplier);            row.style.transition = 'background-color 0.3s ease';            row.style.backgroundColor = '#d4edda';            setTimeout(() => {                row.style.backgroundColor = '';            }, 1000);            return true;        }        return false;    }    removeSupplierRow(supplierId, callback) {        const row = document.querySelector(`tr[data-supplier-id="${supplierId}"]`);        if (row) {            const rowHeight = row.offsetHeight;            row.style.height = rowHeight + 'px';            row.style.overflow = 'hidden';            row.style.transition = 'opacity 0.3s ease-out, height 0.4s ease-out, padding 0.4s ease-out';            row.offsetHeight;            row.style.opacity = '0';            row.style.height = '0';            row.style.paddingTop = '0';            row.style.paddingBottom = '0';            setTimeout(() => {                row.remove();                if (this.tableBody.children.length === 0) {                    this.showNoSuppliersMessage();                }                if (callback) callback();            }, 450);             return true;        }        return false;    }    showNoSuppliersMessage() {        this.tableBody.innerHTML = '';        this.emptyState.classList.remove('d-none');    }    showLoadingSpinner(show) {        const spinner = document.getElementById('loadingSpinner');        if (spinner) {            if (show) {                spinner.classList.remove('d-none');            } else {                spinner.classList.add('d-none');            }        }    }    showAlert(type, message) {        const alertContainer = document.getElementById('alertContainer');        if (!alertContainer) return;        const toastId = 'toast-' + Date.now();        const toastClass = type === 'success' ? 'bg-success' : 'bg-danger';        const icon = type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill';        const title = type === 'success' ? 'Success' : 'Error';        const toastHtml = `            <div id="${toastId}" class="toast align-items-center text-white ${toastClass} border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="4000">                <div class="d-flex">                    <div class="toast-body">                        <i class="bi ${icon} me-2"></i>                        <strong>${title}:</strong> ${this.escapeHtml(message)}                    </div>                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>                </div>            </div>        `;        alertContainer.insertAdjacentHTML('beforeend', toastHtml);        const toastElement = document.getElementById(toastId);        const toast = new bootstrap.Toast(toastElement);        toast.show();        toastElement.addEventListener('hidden.bs.toast', () => {            toastElement.remove();        });    }    getSupplierTypeBadgeClass(supplierType) {        switch (supplierType) {            case 'Dairy Cooperative':                return 'bg-success text-white';            case 'Individual Farm':                return 'bg-primary text-white';            case 'Packaging Supplier':                return 'bg-warning text-dark';            case 'Ingredient Supplier':                return 'bg-info text-white';            case 'Equipment Supplier':                return 'bg-secondary text-white';            default:                return 'bg-light text-dark';        }    }    escapeHtml(text) {        if (typeof text !== 'string') return text;        const div = document.createElement('div');        div.textContent = text;        return div.innerHTML;    }}