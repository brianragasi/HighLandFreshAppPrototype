class SupplierModal {    constructor(supplierManager) {        this.supplierManager = supplierManager;        this.supplierModal = null;        this.deleteConfirmModal = null;        this.currentSupplierId = null;        this.#initializeModals();        this.#setupFormValidation();    }    #initializeModals() {        const supplierModalElement = document.getElementById('supplierModal');        const deleteModalElement = document.getElementById('deleteConfirmModal');        if (supplierModalElement) {            this.supplierModal = new bootstrap.Modal(supplierModalElement);        } else {            console.error('supplierModal element not found - modal functionality will fail');        }        if (deleteModalElement) {            this.deleteConfirmModal = new bootstrap.Modal(deleteModalElement);        } else {            console.error('deleteConfirmModal element not found - delete functionality will fail');        }    }    openAddSupplierModal() {        this.currentSupplierId = null;        const modalLabel = document.getElementById('supplierModalLabel');        const saveBtn = document.getElementById('saveSupplierBtn');        if (modalLabel) modalLabel.textContent = 'Add Supplier';        if (saveBtn) saveBtn.textContent = 'Save Supplier';        this.resetSupplierForm();        if (this.supplierModal) {            this.supplierModal.show();        }    }    openEditSupplierModal(supplier) {        this.currentSupplierId = supplier.supplier_id;        const modalLabel = document.getElementById('supplierModalLabel');        const saveBtn = document.getElementById('saveSupplierBtn');        const statusField = document.getElementById('statusField');        if (modalLabel) modalLabel.textContent = 'Edit Supplier';        if (saveBtn) saveBtn.textContent = 'Update Supplier';        if (statusField) statusField.style.display = 'block';        this.populateForm(supplier);        this.clearFormValidation();        if (this.supplierModal) {            this.supplierModal.show();        }    }    populateForm(supplier) {        const fields = {            'supplierId': supplier.supplier_id,            'supplierName': supplier.name,            'contactPerson': supplier.contact_person,            'supplierEmail': supplier.email,            'phoneNumber': supplier.phone_number,            'paymentTerms': supplier.payment_term_id,            'supplierAddress': supplier.address || '',            'supplierCountry': supplier.country_id || '',            'supplierCity': supplier.city_id || '',            'postalCode': supplier.postal_code || '',            'taxId': supplier.tax_id || '',            'status': supplier.is_active ? 'active' : 'inactive',            'supplierType': supplier.supplier_type || 'Dairy Cooperative',            'cooperativeCode': supplier.cooperative_code || '',            'dailyMilkCapacity': supplier.daily_milk_capacity_liters || '',            'numberOfCows': supplier.number_of_cows || '',            'milkQualityGrade': supplier.milk_quality_grade || 'Grade A',            'deliverySchedule': supplier.delivery_schedule || 'Daily',            'establishedYear': supplier.established_year || '',            'collectionStationAddress': supplier.collection_station_address || ''        };        Object.entries(fields).forEach(([fieldId, value]) => {            const field = document.getElementById(fieldId);            if (field) {                field.value = value;                if (field.tagName === 'SELECT' && fieldId === 'supplierCountry' && value) {                    field.dispatchEvent(new Event('change'));                }                if (field.tagName === 'SELECT' && fieldId === 'supplierType' && value) {                    field.dispatchEvent(new Event('change'));                }            }        });        const nmfdcCheckbox = document.getElementById('isNmfdcMember');        if (nmfdcCheckbox) {            nmfdcCheckbox.checked = supplier.is_nmfdc_member || false;        }    }    async saveSupplier() {        if (!this.validateSupplierForm()) {            return;        }        if (!this.supplierManager) {            console.error('SupplierManager is not initialized');            alert('System error: SupplierManager not initialized');            return;        }        if (!this.supplierManager.api) {            console.error('SupplierAPI is not initialized');            alert('System error: SupplierAPI not initialized');            return;        }        if (!this.supplierManager.renderer) {            console.error('SupplierRenderer is not initialized');            alert('System error: SupplierRenderer not initialized');            return;        }        const supplierData = this.getFormData();        try {            this.setLoadingState(true);            let response;            if (this.currentSupplierId) {                response = await this.supplierManager.api.updateSupplier(this.currentSupplierId, supplierData);            } else {                response = await this.supplierManager.api.createSupplier(supplierData);            }            if (this.supplierModal) {                this.supplierModal.hide();            }            this.supplierManager.renderer.showAlert('success', response.message);            if (!this.currentSupplierId && response.data) {                this.supplierManager.suppliers.unshift(response.data);                this.supplierManager.renderer.addSupplierToTable(response.data);            } else if (response.data) {                this.supplierManager.updateSupplierInArray(response.data);                if (!this.supplierManager.renderer.updateSupplierRow(response.data)) {                    await this.supplierManager.loadSuppliers();                }            }        } catch (error) {            console.error('Error saving supplier:', error);            this.handleApiError(error, 'Failed to save supplier');        } finally {            this.setLoadingState(false);        }    }    showDeleteConfirmation(supplier) {        this.currentSupplierId = supplier.supplier_id;        const supplierNameElement = document.getElementById('deleteSupplierName');        if (supplierNameElement) {            supplierNameElement.textContent = supplier.name;        }        if (this.deleteConfirmModal) {            this.deleteConfirmModal.show();        }    }    async confirmDeleteSupplier() {        if (!this.supplierManager || !this.supplierManager.api || !this.supplierManager.renderer) {            console.error('SupplierManager or its dependencies are not initialized');            alert('System error: Cannot delete supplier - dependencies not initialized');            return;        }        try {            this.setDeleteLoadingState(true);            const response = await this.supplierManager.api.deleteSupplier(this.currentSupplierId);            this.deleteConfirmModal.hide();            this.supplierManager.renderer.showAlert('success', response.message);            const removed = this.supplierManager.renderer.removeSupplierRow(this.currentSupplierId, () => {                this.supplierManager.suppliers = this.supplierManager.suppliers.filter(                    s => s.supplier_id != this.currentSupplierId                );            });            if (!removed) {                await this.supplierManager.loadSuppliers();            }        } catch (error) {            console.error('Error deleting supplier:', error);            this.handleApiError(error, 'Failed to delete supplier');        } finally {            this.setDeleteLoadingState(false);        }    }    getFormData() {        const countryValue = document.getElementById('supplierCountry')?.value;        const cityValue = document.getElementById('supplierCity')?.value;        const paymentTermValue = document.getElementById('paymentTerms')?.value;        const statusValue = document.getElementById('status')?.value;        const supplierTypeValue = document.getElementById('supplierType')?.value;        const cooperativeCodeValue = document.getElementById('cooperativeCode')?.value;        const dailyMilkCapacityValue = document.getElementById('dailyMilkCapacity')?.value;        const numberOfCowsValue = document.getElementById('numberOfCows')?.value;        const milkQualityGradeValue = document.getElementById('milkQualityGrade')?.value;        const deliveryScheduleValue = document.getElementById('deliverySchedule')?.value;        const establishedYearValue = document.getElementById('establishedYear')?.value;        const collectionStationAddressValue = document.getElementById('collectionStationAddress')?.value;        const isNmfdcMemberValue = document.getElementById('isNmfdcMember')?.checked;        return {            name: document.getElementById('supplierName')?.value.trim() || '',            contact_person: document.getElementById('contactPerson')?.value.trim() || '',            email: document.getElementById('supplierEmail')?.value.trim() || '',            phone_number: document.getElementById('phoneNumber')?.value.trim() || '',            payment_term_id: paymentTermValue && paymentTermValue !== '' ? paymentTermValue : null,            address: document.getElementById('supplierAddress')?.value.trim() || '',            country_id: countryValue && countryValue !== '' ? countryValue : null,            city_id: cityValue && cityValue !== '' ? cityValue : null,            postal_code: document.getElementById('postalCode')?.value.trim() || '',            tax_id: document.getElementById('taxId')?.value.trim() || '',            is_active: this.currentSupplierId ? (statusValue === 'active' ? 1 : 0) : 1,            supplier_type: supplierTypeValue && supplierTypeValue !== '' ? supplierTypeValue : 'Dairy Cooperative',            cooperative_code: cooperativeCodeValue && cooperativeCodeValue !== '' ? cooperativeCodeValue.trim() : null,            daily_milk_capacity_liters: dailyMilkCapacityValue && dailyMilkCapacityValue !== '' ? parseFloat(dailyMilkCapacityValue) : null,            number_of_cows: numberOfCowsValue && numberOfCowsValue !== '' ? parseInt(numberOfCowsValue) : null,            milk_quality_grade: milkQualityGradeValue || 'Grade A',            delivery_schedule: deliveryScheduleValue || 'Daily',            established_year: establishedYearValue && establishedYearValue !== '' && parseInt(establishedYearValue) >= 1901 && parseInt(establishedYearValue) <= 2155 ? parseInt(establishedYearValue) : null,            collection_station_address: collectionStationAddressValue && collectionStationAddressValue !== '' ? collectionStationAddressValue.trim() : null,            is_nmfdc_member: isNmfdcMemberValue || false        };    }    validateSupplierForm() {        let isValid = true;        const fields = {            supplierName: { required: true, maxLength: 255, label: 'Company name' },            contactPerson: { required: true, maxLength: 255, label: 'Contact person' },            supplierEmail: { required: true, maxLength: 255, label: 'Email', email: true },            phoneNumber: { required: true, maxLength: 20, label: 'Phone number' },            paymentTerms: { required: true, label: 'Payment terms' },            supplierType: { required: true, label: 'Supplier type' }        };        this.clearFormValidation();        Object.entries(fields).forEach(([fieldId, rules]) => {            const field = document.getElementById(fieldId);            if (!field) {                console.error(`Field ${fieldId} not found in DOM`);                return;            }            const value = field.value.trim();            if (rules.required && !value) {                this.setFieldError(field, `${rules.label} is required`);                isValid = false;                return;            }            if (value && rules.maxLength && value.length > rules.maxLength) {                this.setFieldError(field, `${rules.label} must be ${rules.maxLength} characters or less`);                isValid = false;                return;            }            if (value && rules.email && !this.isValidEmail(value)) {                this.setFieldError(field, 'Please enter a valid email address');                isValid = false;                return;            }        });        return isValid;    }    #setupFormValidation() {        const fields = ['supplierName', 'contactPerson', 'supplierEmail', 'phoneNumber', 'paymentTerms', 'supplierCountry', 'supplierCity'];        fields.forEach(fieldId => {            const field = document.getElementById(fieldId);            if (field) {                field.addEventListener('input', () => {                    field.classList.remove('is-invalid');                    const feedback = field.nextElementSibling;                    if (feedback && feedback.classList.contains('invalid-feedback')) {                        feedback.textContent = '';                    }                });                if (field.tagName === 'SELECT') {                    field.addEventListener('change', () => {                        field.classList.remove('is-invalid');                        const feedback = field.nextElementSibling;                        if (feedback && feedback.classList.contains('invalid-feedback')) {                            feedback.textContent = '';                        }                    });                }            }        });    }    resetSupplierForm() {        const form = document.getElementById('supplierForm');        if (form) {            form.reset();        }        const paymentTermSelect = document.getElementById('paymentTerms');        const countrySelect = document.getElementById('supplierCountry');        const citySelect = document.getElementById('supplierCity');        if (paymentTermSelect) paymentTermSelect.value = '';        if (countrySelect) countrySelect.value = '';        if (citySelect) {            citySelect.innerHTML = '<option value="">Select a city...</option>';            citySelect.disabled = true;        }        this.clearFormValidation();    }    clearFormValidation() {        const fields = document.querySelectorAll('#supplierForm .form-control, #supplierForm .form-select');        fields.forEach(field => {            field.classList.remove('is-invalid', 'is-valid');            const feedback = field.nextElementSibling;            if (feedback && feedback.classList.contains('invalid-feedback')) {                feedback.textContent = '';            }        });    }    setFieldError(field, message) {        field.classList.add('is-invalid');        const feedback = field.nextElementSibling;        if (feedback && feedback.classList.contains('invalid-feedback')) {            feedback.textContent = message;        }    }    isValidEmail(email) {        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;        return emailRegex.test(email);    }    setLoadingState(loading) {        const saveBtn = document.getElementById('saveSupplierBtn');        const spinner = saveBtn?.querySelector('.spinner-border');        if (saveBtn) {            saveBtn.disabled = loading;        }        if (spinner) {            if (loading) {                spinner.classList.remove('d-none');            } else {                spinner.classList.add('d-none');            }        }    }    setDeleteLoadingState(loading) {        const deleteBtn = document.getElementById('confirmDeleteBtn');        const spinner = deleteBtn?.querySelector('.spinner-border');        if (deleteBtn) {            deleteBtn.disabled = loading;        }        if (spinner) {            if (loading) {                spinner.classList.remove('d-none');            } else {                spinner.classList.add('d-none');            }        }    }    handleApiError(error, defaultMessage) {        let message = defaultMessage;        if (error.response && error.response.data && error.response.data.message) {            message = error.response.data.message;        } else if (error.message) {            message = error.message;        }        if (this.supplierManager && this.supplierManager.renderer) {            this.supplierManager.renderer.showAlert('error', message);        } else {            console.error('SupplierRenderer not available, using fallback alert');            alert('Error: ' + message);        }    }}