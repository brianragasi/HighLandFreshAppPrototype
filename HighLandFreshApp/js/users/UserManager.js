class UserManager {    constructor() {        this.api = new UserAPI();        this.renderer = new UserRenderer();        this.modal = new UserModal(this.api);        this.deleteModal = null;        this.userToDelete = null;        this.initializeDeleteModal();    }    async init() {        try {            this.renderer.showLoading();            await this.loadUsers();        } catch (error) {            console.error('Failed to initialize user management:', error);            this.renderer.hideLoading();            this.renderer.showError('Failed to load users. Please refresh the page.');        }    }    async loadUsers() {        try {            this.renderer.showLoading();            const response = await this.api.getAllUsers();            if (response.success) {                this.renderer.renderUsers(response.data);            } else {                throw new Error(response.message || 'Failed to load users');            }        } catch (error) {            console.error('Error loading users:', error);            this.renderer.hideLoading();            this.renderer.showError(error.message || 'Failed to load users');        }    }    async saveUser() {        if (!this.modal.validateForm()) {            return;        }        const formData = this.modal.getFormData();        this.modal.setLoading(true);        try {            let response;            if (this.modal.isEditMode) {                response = await this.api.updateUser(this.modal.currentUserId, formData);            } else {                response = await this.api.createUser(formData);            }            if (response.success) {                this.modal.hide();                if (this.modal.isEditMode) {                    this.renderer.updateUserRow(response.data);                    this.renderer.showSuccess(`User "${formData.username}" updated successfully`);                } else {                    this.renderer.addUserRow(response.data);                    this.renderer.showSuccess(`User "${formData.username}" created successfully`);                }            } else {                throw new Error(response.message || 'Failed to save user');            }        } catch (error) {            console.error('Error saving user:', error);            this.renderer.showError(error.message || 'Failed to save user');        } finally {            this.modal.setLoading(false);        }    }    async editUser(userId) {        try {            const response = await this.api.getAllUsers(true);             if (response.success && response.data) {                const user = response.data.find(u => u.user_id == userId);                if (user) {                    this.modal.openEditModal(user);                } else {                    this.renderer.showError('User not found');                }            } else {                this.renderer.showError('Failed to fetch user data');            }        } catch (error) {            console.error('Error fetching user data for edit:', error);            this.renderer.showError('Failed to load user data for editing');        }    }    deleteUser(userId, username) {        this.userToDelete = { id: userId, username: username };        document.getElementById('deleteUserName').textContent = username;        this.deleteModal.show();    }    async confirmDeleteUser() {        if (!this.userToDelete) {            return;        }        const deleteBtn = document.getElementById('confirmDeleteBtn');        const deleteSpinner = document.getElementById('deleteSpinner');        deleteSpinner.classList.remove('d-none');        deleteBtn.disabled = true;        try {            const response = await this.api.deleteUser(this.userToDelete.id);            if (response.success) {                this.deleteModal.hide();                this.renderer.removeUserRow(this.userToDelete.id);                this.renderer.showSuccess(`User "${this.userToDelete.username}" deleted successfully`);            } else {                throw new Error(response.message || 'Failed to delete user');            }        } catch (error) {            console.error('Error deleting user:', error);            this.renderer.showError(error.message || 'Failed to delete user');        } finally {            deleteSpinner.classList.add('d-none');            deleteBtn.disabled = false;            this.userToDelete = null;        }    }    initializeDeleteModal() {        this.deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));        document.getElementById('deleteModal').addEventListener('hidden.bs.modal', () => {            this.userToDelete = null;            document.getElementById('deleteSpinner').classList.add('d-none');            document.getElementById('confirmDeleteBtn').disabled = false;        });    }    async refresh() {        await this.loadUsers();    }    searchUsers(searchTerm) {        console.log('Search functionality to be implemented:', searchTerm);    }}window.editUser = function(userId) {    if (window.userManager) {        window.userManager.editUser(userId);    }};window.deleteUser = function(userId, username) {    if (window.userManager) {        window.userManager.deleteUser(userId, username);    }};window.confirmDeleteUser = function() {    if (window.userManager) {        window.userManager.confirmDeleteUser();    }};window.UserManager = UserManager;