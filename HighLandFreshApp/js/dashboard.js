class DashboardManager {    constructor() {        this.checkAuthentication();        this.displayUserInfo();        this.initializeLogout();    }    checkAuthentication() {        const user = this.getCurrentUser();        if (!user) {            window.location.href = 'login.html';            return;        }        const currentPage = window.location.pathname.split('/').pop();        const allowedPages = this.getAllowedPages(user.role);        if (!allowedPages.includes(currentPage)) {            const defaultPage = this.getDashboardPage(user.role);            window.location.href = defaultPage;        }    }    getCurrentUser() {        try {            const userStr = sessionStorage.getItem('user');            return userStr ? JSON.parse(userStr) : null;        } catch (error) {            console.error('Error parsing user data:', error);            return null;        }    }    getDashboardPage(role) {        switch (role) {            case 'Admin':                return 'admin-dashboard.html';            case 'Cashier':                return 'cashier-dashboard.html';            case 'Inventory':                return 'inventory-dashboard.html';            default:                return 'login.html';        }    }    getAllowedPages(role) {        switch (role) {            case 'Admin':                return ['admin-dashboard.html', 'products.html', 'suppliers.html'];            case 'Cashier':                return ['cashier-dashboard.html'];            case 'Inventory':                return ['inventory-dashboard.html'];            default:                return ['login.html'];        }    }    displayUserInfo() {        const user = this.getCurrentUser();        if (user) {            const welcomeElement = document.getElementById('userWelcome');            if (welcomeElement) {                welcomeElement.textContent = `Welcome, ${user.username}!`;            }        }    }    initializeLogout() {        window.logout = () => this.logout();    }    async logout() {        try {            sessionStorage.removeItem('user');            await this.callLogoutEndpoint();            window.location.href = 'login.html';        } catch (error) {            console.error('Logout error:', error);            window.location.href = 'login.html';        }    }    async callLogoutEndpoint() {        try {            const response = await fetch(APIResponseHandler.getApiUrl('LogoutAPI.php'), {                method: 'POST',                credentials: 'same-origin'            });            return response.ok;        } catch (error) {            console.error('Server logout failed:', error);            return false;        }    }    showNotification(message, type = 'info') {        const notification = document.createElement('div');        notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;        notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';        notification.innerHTML = `            ${message}            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>        `;        document.body.appendChild(notification);        setTimeout(() => {            if (notification.parentNode) {                notification.parentNode.removeChild(notification);            }        }, 5000);    }}class SessionTimeoutChecker {    constructor(timeoutMinutes = 30) {        this.timeoutMinutes = timeoutMinutes;        this.warningMinutes = 5;        this.checkInterval = 60000;         this.startChecking();    }    startChecking() {        setInterval(() => {            this.checkSessionTimeout();        }, this.checkInterval);    }    checkSessionTimeout() {        const user = sessionStorage.getItem('user');        if (!user) return;        const loginTime = new Date().getTime() - (this.timeoutMinutes * 60 * 1000);    }    showTimeoutWarning() {        if (confirm(`Your session will expire in ${this.warningMinutes} minutes. Do you want to extend your session?`)) {            console.log('Session extended');        }    }}document.addEventListener('DOMContentLoaded', () => {    new DashboardManager();    new SessionTimeoutChecker();});document.addEventListener('visibilitychange', () => {    if (!document.hidden) {        const dashboardManager = new DashboardManager();    }});