class ValidationUtils {    static validateProduct(productData) {        const errors = {};        let isValid = true;        if (!productData.name || productData.name.trim().length === 0) {            errors.name = 'Highland Fresh product name is required';            isValid = false;        } else if (productData.name.trim().length > 100) {            errors.name = 'Product name must be 100 characters or less';            isValid = false;        } else if (!productData.name.toLowerCase().includes('highland fresh') && !productData.name.toLowerCase().includes('hf-')) {            console.warn('Product name does not include Highland Fresh branding');        }        if (!productData.barcode || productData.barcode.trim().length === 0) {            errors.barcode = 'Barcode is required';            isValid = false;        } else if (productData.barcode.trim().length > 50) {            errors.barcode = 'Barcode must be 50 characters or less';            isValid = false;        } else if (!/^[A-Z0-9\-_]+$/.test(productData.barcode.trim())) {            errors.barcode = 'Barcode can only contain uppercase letters, numbers, hyphens, and underscores';            isValid = false;        } else if (!productData.barcode.startsWith('HF-') && !productData.barcode.startsWith('4806504950')) {            console.warn('Barcode does not follow Highland Fresh naming convention (HF- prefix or Philippine EAN barcode recommended)');        }        if (!productData.category_id || productData.category_id === 0) {            errors.category = 'Dairy product category is required';            isValid = false;        } else if (typeof productData.category_id !== 'number' || productData.category_id < 1) {            errors.category = 'Please select a valid dairy product category';            isValid = false;        }        if (!productData.unit_id || productData.unit_id === 0) {            errors.unit = 'Unit of measure is required';            isValid = false;        } else if (typeof productData.unit_id !== 'number' || productData.unit_id < 1) {            errors.unit = 'Please select a valid unit of measure';            isValid = false;        }        const price = parseFloat(productData.price);        if (isNaN(price) || price <= 0) {            errors.price = 'Price must be a positive number greater than ₱0';            isValid = false;        } else if (price > 999999.99) {            errors.price = 'Price cannot exceed ₱999,999.99';            isValid = false;        } else if (price < 5.00) {            console.warn('Price is very low for dairy products (below ₱5.00)');        }        const quantity = parseInt(productData.quantity_on_hand);        if (isNaN(quantity) || quantity < 0) {            errors.quantity_on_hand = 'Quantity must be a non-negative number (0 or greater)';            isValid = false;        } else if (quantity > 999999) {            errors.quantity_on_hand = 'Quantity cannot exceed 999,999 units';            isValid = false;        }        const reorderLevel = parseInt(productData.reorder_level);        if (isNaN(reorderLevel) || reorderLevel < 0) {            errors.reorder_level = 'Reorder level must be a non-negative number (0 or greater)';            isValid = false;        } else if (reorderLevel > quantity) {            errors.reorder_level = 'Reorder level should not exceed current quantity on hand';            isValid = false;        } else if (reorderLevel === 0 && quantity > 0) {            console.warn('Reorder level is 0 - consider setting appropriate reorder level for dairy products');        }        if (productData.expiry_date) {            const expiryDate = new Date(productData.expiry_date);            const today = new Date();            const futureLimit = new Date();            futureLimit.setFullYear(today.getFullYear() + 2);             if (expiryDate <= today) {                errors.expiry_date = 'Expiry date must be in the future';                isValid = false;            } else if (expiryDate > futureLimit) {                errors.expiry_date = 'Expiry date seems too far in the future for dairy products (max 2 years)';                isValid = false;            }        }        return { isValid, errors };    }    static formatCurrency(amount) {        return new Intl.NumberFormat('en-PH', {            style: 'currency',            currency: 'PHP',            minimumFractionDigits: 2        }).format(amount);    }    static escapeHtml(text) {        if (typeof text !== 'string') return text;        const map = {            '&': '&amp;',            '<': '&lt;',            '>': '&gt;',            '"': '&quot;',            "'": '&#039;'        };        return text.replace(/[&<>"']/g, function(m) { return map[m]; });    }    static setFieldError(fieldId, message) {        const field = document.getElementById(fieldId);        const errorDiv = document.getElementById(fieldId.replace('product', '').toLowerCase() + 'Error');        if (field) {            field.classList.add('is-invalid');        }        if (errorDiv) {            errorDiv.textContent = message;        }    }    static clearValidationErrors(fieldIds = []) {        const defaultFields = ['productName', 'productBarcode', 'productCategory', 'productUnit', 'productPrice', 'productQuantity', 'productReorderLevel'];        const fieldsToProcess = fieldIds.length > 0 ? fieldIds : defaultFields;        const errorIds = ['nameError', 'barcodeError', 'categoryError', 'unitError', 'priceError', 'quantityError', 'reorderLevelError'];        fieldsToProcess.forEach(fieldId => {            const field = document.getElementById(fieldId);            if (field) {                field.classList.remove('is-invalid');            }        });        errorIds.forEach(errorId => {            const errorElement = document.getElementById(errorId);            if (errorElement) {                errorElement.textContent = '';            }        });    }}window.ValidationUtils = ValidationUtils;