class ProductRenderer {    constructor() {        this.tableBody = document.getElementById('productsTableBody');        this.emptyState = document.getElementById('emptyState');        this.loadingSpinner = document.getElementById('loadingSpinner');        this.alertContainer = document.getElementById('alertContainer');    }    renderTable(products) {        if (!products || products.length === 0) {            this.showEmptyState();            return;        }        this.hideEmptyState();        const tableContent = this.#generateTableContent(products);        this.#updateTableWithContent(tableContent);    }    showEmptyState() {        if (this.tableBody) {            const existingRows = this.tableBody.querySelectorAll('tr');            if (existingRows.length > 0) {                this.#fadeOutRows(existingRows, () => {                    this.tableBody.innerHTML = '';                    this.emptyState?.classList.remove('d-none');                });            } else {                this.tableBody.innerHTML = '';                this.emptyState?.classList.remove('d-none');            }        }    }    hideEmptyState() {        this.emptyState?.classList.add('d-none');    }    setLoading(show) {        if (this.loadingSpinner) {            if (show) {                this.loadingSpinner.classList.remove('d-none');            } else {                this.loadingSpinner.classList.add('d-none');            }        }    }    showAlert(type, message) {        if (!this.alertContainer) return;        const toastId = 'toast-' + Date.now();        const toastClass = type === 'success' ? 'bg-success' : 'bg-danger';        const icon = type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill';        const title = type === 'success' ? 'Success' : 'Error';        const toastHtml = `            <div id="${toastId}" class="toast align-items-center text-white ${toastClass} border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="4000">                <div class="d-flex">                    <div class="toast-body">                        <i class="bi ${icon} me-2"></i>                        <strong>${title}:</strong> ${ValidationUtils.escapeHtml(message)}                    </div>                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>                </div>            </div>        `;        this.alertContainer.insertAdjacentHTML('beforeend', toastHtml);        const toastElement = document.getElementById(toastId);        const toast = new bootstrap.Toast(toastElement);        toast.show();        toastElement.addEventListener('hidden.bs.toast', () => {            toastElement.remove();        });    }    findRowByProductId(productId) {    if (!this.tableBody) return null;    return this.tableBody.querySelector(`tr[data-product-id="${productId}"]`);    }    #generateTableContent(products) {    return products.map(product => {            const isLowStock = product.quantity_on_hand <= product.reorder_level;            const stockBadge = isLowStock ?                 `<span class="badge bg-warning text-dark">Low Stock</span>` : '';            return `    <tr data-product-id="${product.product_id}" ${isLowStock ? 'class="table-warning"' : ''}>        <td>${ValidationUtils.escapeHtml(product.name)} ${stockBadge}</td>            <td><code>${ValidationUtils.escapeHtml(product.barcode)}</code></td>            <td>${ValidationUtils.escapeHtml(product.category)}</td>            <td>${ValidationUtils.escapeHtml(product.supplier_name || '')}</td>            <td>${ValidationUtils.formatCurrency(product.price)}</td>            <td>${product.quantity_on_hand}</td>            <td>${product.reorder_level}</td>            <td>${product.expiry_date ? ValidationUtils.escapeHtml(product.expiry_date) : ''}</td>            <td>                        <div class="btn-group btn-group-sm" role="group">                            <button type="button" class="btn btn-outline-primary"                                     onclick="window.productManager.editProduct(${product.product_id})"                                     title="Edit">                                <i class="bi bi-pencil"></i>                            </button>                            <button type="button" class="btn btn-outline-danger"                                     onclick="window.productManager.deleteProduct(${product.product_id})"                                     title="Delete">                                <i class="bi bi-trash"></i>                            </button>                        </div>                    </td>                </tr>            `;        }).join('');    }    #updateTableWithContent(newContent) {        if (!this.tableBody) return;        const existingRows = Array.from(this.tableBody.querySelectorAll('tr'));        if (existingRows.length === 0) {            this.tableBody.innerHTML = newContent;            this.#animateNewRows();        } else {            this.tableBody.innerHTML = newContent;            const newRows = Array.from(this.tableBody.querySelectorAll('tr'));            newRows.forEach(row => {                row.classList.add('row-adding');                setTimeout(() => {                    row.classList.remove('row-adding');                }, 400);            });        }    }    #animateNewRows() {        if (!this.tableBody) return;        const newRows = Array.from(this.tableBody.querySelectorAll('tr'));        newRows.forEach((row, index) => {            row.style.opacity = '0';            row.style.transform = 'translateX(30px)';            setTimeout(() => {                row.style.transition = 'all 0.3s ease';                row.style.opacity = '1';                row.style.transform = 'translateX(0)';            }, index * 50);        });    }    #fadeOutRows(rows, callback) {        if (rows.length === 0) {            callback();            return;        }        Array.from(rows).forEach((row, index) => {            setTimeout(() => {                row.classList.add('row-deleting');            }, index * 50);        });        setTimeout(callback, rows.length * 50 + 400);    }    updateRowContent(row, product) {        const isLowStock = product.quantity_on_hand <= product.reorder_level;        const stockBadge = isLowStock ?             `<span class="badge bg-warning text-dark">Low Stock</span>` : '';        row.className = isLowStock ? 'table-warning' : '';        row.setAttribute('data-product-id', product.product_id);        row.innerHTML = `            <td>${ValidationUtils.escapeHtml(product.name)} ${stockBadge}</td>            <td><code>${ValidationUtils.escapeHtml(product.barcode)}</code></td>            <td>${ValidationUtils.escapeHtml(product.category)}</td>            <td>${ValidationUtils.escapeHtml(product.supplier_name || '')}</td>            <td>${ValidationUtils.formatCurrency(product.price)}</td>            <td>${product.quantity_on_hand}</td>            <td>${product.reorder_level}</td>            <td>${product.expiry_date ? ValidationUtils.escapeHtml(product.expiry_date) : ''}</td>            <td>                <div class="btn-group btn-group-sm" role="group">                    <button type="button" class="btn btn-outline-primary"                             onclick="window.productManager.editProduct(${product.product_id})"                             title="Edit">                        <i class="bi bi-pencil"></i>                    </button>                    <button type="button" class="btn btn-outline-danger"                             onclick="window.productManager.deleteProduct(${product.product_id})"                             title="Delete">                        <i class="bi bi-trash"></i>                    </button>                </div>            </td>        `;    }    addProductToTable(product) {        if (!this.tableBody) return;        this.hideEmptyState();        const row = document.createElement('tr');        const isLowStock = product.quantity_on_hand <= product.reorder_level;        if (isLowStock) {            row.className = 'table-warning row-adding';        } else {            row.className = 'row-adding';        }        const stockBadge = isLowStock ?             `<span class="badge bg-warning text-dark">Low Stock</span>` : '';        row.setAttribute('data-product-id', product.product_id);        row.innerHTML = `            <td>${ValidationUtils.escapeHtml(product.name)} ${stockBadge}</td>            <td><code>${ValidationUtils.escapeHtml(product.barcode)}</code></td>            <td>${ValidationUtils.escapeHtml(product.category)}</td>            <td>${ValidationUtils.escapeHtml(product.supplier_name || '')}</td>            <td>${ValidationUtils.formatCurrency(product.price)}</td>            <td>${product.quantity_on_hand}</td>            <td>${product.reorder_level}</td>            <td>${product.expiry_date ? ValidationUtils.escapeHtml(product.expiry_date) : ''}</td>            <td>                <div class="btn-group btn-group-sm" role="group">                    <button type="button" class="btn btn-outline-primary"                             onclick="window.productManager.editProduct(${product.product_id})"                             title="Edit">                        <i class="bi bi-pencil"></i>                    </button>                    <button type="button" class="btn btn-outline-danger"                             onclick="window.productManager.deleteProduct(${product.product_id})"                             title="Delete">                        <i class="bi bi-trash"></i>                    </button>                </div>            </td>        `;        this.tableBody.insertBefore(row, this.tableBody.firstChild);        setTimeout(() => {            row.classList.remove('row-adding');        }, 600);    }}window.ProductRenderer = ProductRenderer;