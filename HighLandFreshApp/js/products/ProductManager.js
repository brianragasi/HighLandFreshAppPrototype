class ProductManager {    constructor() {        this.products = [];        this.isDeletingProduct = false;         this.api = new ProductAPI();        this.renderer = new ProductRenderer();        this.animations = new ProductAnimations(this.renderer);        this.modal = new ProductModal(this);        this.categoryManager = new CategoryManager(this.api);        this.#setupCategoryEventListeners();        window.productManager = this;        window.productModal = this.modal;         this.#initialize();    }    #setupCategoryEventListeners() {        document.addEventListener('categoryCreated', () => {            console.log('Category created - refreshing product category dropdowns');            this.#refreshCategoryDropdowns();        });        document.addEventListener('categoryUpdated', () => {            console.log('Category updated - refreshing product category dropdowns');            this.#refreshCategoryDropdowns();        });        document.addEventListener('categoryDeleted', () => {            console.log('Category deleted - refreshing product category dropdowns');            this.#refreshCategoryDropdowns();        });    }    async #refreshCategoryDropdowns() {        try {            const response = await this.api.getCategories();            if (response.success && response.data) {                if (this.modal && typeof this.modal.refreshCategoryDropdown === 'function') {                    this.modal.refreshCategoryDropdown(response.data);                }                const categoryDropdowns = document.querySelectorAll('select[name="category"], #category, #productCategory');                categoryDropdowns.forEach(dropdown => {                    const currentValue = dropdown.value;                    dropdown.innerHTML = '<option value="">Select a category</option>';                    response.data.forEach(category => {                        if (category.is_active) {                            const option = document.createElement('option');                            option.value = category.category_id;                            option.textContent = category.category_name;                            dropdown.appendChild(option);                        }                    });                    if (currentValue && dropdown.querySelector(`option[value="${currentValue}"]`)) {                        dropdown.value = currentValue;                    }                });            }        } catch (error) {            console.error('Failed to refresh category dropdowns:', error);        }    }    #initialize() {        console.log('ProductManager initialized, API URL:', this.api.baseUrl);        this.#checkAuthentication();        this.#loadProducts();    }    #checkAuthentication() {        const userWelcome = document.getElementById('userWelcome');        if (userWelcome) {            userWelcome.textContent = `Welcome, ${sessionStorage.getItem('username') || 'Admin'}!`;        }    }    async #loadProducts() {        this.renderer.setLoading(true);        try {            this.products = await this.api.loadAll();            this.renderer.renderTable(this.products);        } catch (error) {            this.#handleLoadError(error);        } finally {            this.renderer.setLoading(false);        }    }    async reloadProducts() {        await this.#loadProducts();    }    openAddProductModal() {        this.modal.openAddModal();    }    editProduct(productId) {        const product = this.products.find(p => p.product_id === productId);        if (!product) {            this.renderer.showAlert('error', 'Product not found');            return;        }        this.modal.openEditModal(product);    }    deleteProduct(productId) {        const product = this.products.find(p => p.product_id === productId);        if (!product) {            this.renderer.showAlert('error', 'Product not found');            return;        }        this.modal.openDeleteModal(product);    }    async handleFormSubmit() {        const isEditing = this.modal.isEditing();        const productData = this.modal.getFormData();        console.log('Form submission - isEditing:', isEditing, 'currentEditingProductId:', this.modal.currentEditingProductId);        ValidationUtils.clearValidationErrors();        if (!this.#validateProductData(productData)) {            return;        }        this.modal.setFormLoading(true);        ValidationUtils.clearValidationErrors();        try {            let response;            let productId;            if (isEditing) {                productId = this.modal.getCurrentProductId();                response = await this.api.update(productId, productData);            } else {                response = await this.api.create(productData);                productId = response.data?.product_id;            }            this.renderer.showAlert('success', response.message);            this.#forceCloseModal();            if (isEditing) {                const existingIndex = this.products.findIndex(p => p.product_id == productId);                if (existingIndex !== -1 && response.data) {                    this.products[existingIndex] = response.data;                }                const targetRow = this.renderer.findRowByProductId(productId);                if (targetRow && response.data) {                    this.renderer.updateRowContent(targetRow, response.data);                    targetRow.style.transition = 'background-color 0.3s ease';                    targetRow.style.backgroundColor = '#d4edda';                    setTimeout(() => {                        targetRow.style.backgroundColor = '';                    }, 1000);                } else {                    await this.reloadProducts();                }            } else {                if (response.data) {                    this.products.unshift(response.data);                    this.renderer.addProductToTable(response.data);                }            }        } catch (error) {            console.error('Error in handleFormSubmit:', error);            this.#handleFormError(error);        } finally {            this.modal.setFormLoading(false);        }    }    async confirmDelete() {        if (this.isDeletingProduct) {            console.log('Delete already in progress, ignoring duplicate call');            return;        }        const productToDelete = this.modal.getProductToDelete();        if (!productToDelete) return;        this.isDeletingProduct = true;        this.modal.setDeleteLoading(true);        try {            const response = await this.api.delete(productToDelete.product_id);            this.modal.closeDeleteModal();            this.products = this.products.filter(p => p.product_id !== productToDelete.product_id);            this.renderer.showAlert('success', response.message);            this.animations.animateRowDelete(productToDelete.product_id, () => {                if (this.products.length === 0) {                    this.renderer.showEmptyState();                }            });        } catch (error) {            this.#handleDeleteError(error);        } finally {            this.isDeletingProduct = false;            this.modal.setDeleteLoading(false);        }    }    #validateProductData(data) {        console.log('Validating product data:', data);         const validation = ValidationUtils.validateProduct(data);        if (!validation.isValid) {            console.log('Validation errors:', validation.errors);             Object.keys(validation.errors).forEach(field => {                const fieldId = `product${field.charAt(0).toUpperCase() + field.slice(1).replace('_', '')}`;                console.log(`Setting error for field ${field} -> ${fieldId}`);                 ValidationUtils.setFieldError(fieldId, validation.errors[field]);            });        }        return validation.isValid;    }    #forceCloseModal() {        try {            this.modal.closeProductModal();            console.log('Modal close initiated successfully');        } catch (error) {            console.error('Error in forceCloseModal:', error);            setTimeout(() => {                const backdrops = document.querySelectorAll('.modal-backdrop');                backdrops.forEach(backdrop => backdrop.remove());                document.body.classList.remove('modal-open');                document.body.style.overflow = '';                document.body.style.paddingRight = '';                const productModal = document.getElementById('productModal');                if (productModal) {                    productModal.classList.remove('show');                    productModal.style.display = 'none';                    productModal.setAttribute('aria-hidden', 'true');                }            }, 100);        }    }    #handleLoadError(error) {        const status = error.response?.status;        if (status === 401) {            console.log('Authentication required - redirecting to login');            this.renderer.showAlert('error', 'Authentication required. Please log in again.');            setTimeout(() => {                window.location.href = 'login.html';            }, 2000);        } else if (status === 403) {            console.log('Access forbidden - not an admin');            this.renderer.showAlert('error', 'Administrator access required.');        } else {            console.log('General error occurred:', error.message);            this.renderer.showAlert('error', error.userMessage || 'Failed to load products. Please try again.');        }    }    #handleFormError(error) {        const status = error.response?.status;        if (status === 400) {            this.renderer.showAlert('error', error.userMessage);        } else if (status === 409) {            ValidationUtils.setFieldError('productBarcode', error.userMessage);        } else if (status === 401) {            this.renderer.showAlert('error', 'Authentication required. Please log in again.');            setTimeout(() => {                window.location.href = 'login.html';            }, 2000);        } else if (status === 403) {            this.renderer.showAlert('error', 'Administrator access required.');        } else {            this.renderer.showAlert('error', error.userMessage || 'Failed to save product. Please try again.');        }    }    #handleDeleteError(error) {        const status = error.response?.status;        if (status === 401) {            this.renderer.showAlert('error', 'Authentication required. Please log in again.');            setTimeout(() => {                window.location.href = 'login.html';            }, 2000);        } else if (status === 403) {            this.renderer.showAlert('error', 'Administrator access required.');        } else if (status === 404) {            this.renderer.showAlert('error', 'Product not found.');        } else {            this.renderer.showAlert('error', error.userMessage || 'Failed to delete product. Please try again.');        }    }}window.ProductManager = ProductManager;