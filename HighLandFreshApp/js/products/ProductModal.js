class ProductModal {    constructor(productManager) {        this.productManager = productManager;        this.currentEditingProductId = null;        this.productToDelete = null;        this.#initializeElements();        this.#setupEventListeners();        this.#initializeDropdowns();    }    async #initializeDropdowns() {        try {            const [categories, units, suppliers] = await Promise.allSettled([                this.productManager.api.loadCategoriesWithStats(),                 this.productManager.api.loadUnits(),                this.productManager.api.loadSuppliers()            ]);            const categoryData = categories.status === 'fulfilled' ? categories.value : [];            const unitData = units.status === 'fulfilled' ? units.value : [];            const supplierData = suppliers.status === 'fulfilled' ? suppliers.value : [];            if (!this.fields.category) {                console.warn('Category select element with id="category" not found in DOM.');            } else {                this.#populateEnhancedCategoryDropdown(categoryData);            }            if (!this.fields.unit) {                console.warn('Unit select element with id="unit" not found in DOM.');            } else {                this.#populateDropdown(this.fields.unit, unitData, 'unit_id', 'unit_name', 'Select Unit', (unit) => `${unit.unit_name} (${unit.unit_abbreviation})`);            }            this.#populateSupplierDropdown(supplierData);            this.#initializeQuickAddCategory();        } catch (error) {            console.error('Failed to load dropdown data:', error);            this.productManager.showError('Failed to load form data. Please refresh the page.');        }    }    #populateDropdown(selectElement, items, valueKey, textKey, placeholder, customTextFormatter = null) {        selectElement.innerHTML = `<option value="">${placeholder}</option>`;        items.forEach(item => {            const option = document.createElement('option');            option.value = item[valueKey];            option.textContent = customTextFormatter ? customTextFormatter(item) : item[textKey];            selectElement.appendChild(option);        });    }    #populateSupplierDropdown(suppliers) {        const supplierSelect = document.getElementById('supplier');        if (!supplierSelect) return;        supplierSelect.innerHTML = '<option value="">Select Supplier</option>';        suppliers.forEach(supplier => {            const option = document.createElement('option');            option.value = supplier.supplier_id;            option.textContent = supplier.name;            option.setAttribute('data-email', supplier.email || '');            option.setAttribute('data-phone', supplier.phone_number || '');            supplierSelect.appendChild(option);        });        console.log(`Populated supplier dropdown with ${suppliers.length} suppliers`);    }    #populateEnhancedCategoryDropdown(categories) {        const categorySelect = document.getElementById('category');        if (!categorySelect) return;        categorySelect.innerHTML = '<option value="">Select Category</option>';        const sortedCategories = categories.sort((a, b) => a.category_name.localeCompare(b.category_name));        sortedCategories.forEach(category => {            const option = document.createElement('option');            option.value = category.category_id;            option.textContent = category.category_name;            option.setAttribute('data-category-id', category.category_id);            option.setAttribute('data-product-count', category.product_count || 0);            categorySelect.appendChild(option);        });    }    #updateCategoryStats(categories) {        const statsElement = document.getElementById('categoryStats');        if (!statsElement) return;        const activeCount = categories.filter(cat => cat.is_active).length;        const totalProducts = categories.reduce((sum, cat) => sum + (cat.product_count || 0), 0);        statsElement.textContent = `${activeCount} active categories, ${totalProducts} total products`;    }    #initializeQuickAddCategory() {        const quickForm = document.getElementById('quickAddCategoryForm');        if (!quickForm) return;        quickForm.addEventListener('submit', async (e) => {            e.preventDefault();            await this.#handleQuickAddCategory(e);        });    }    async #handleQuickAddCategory(e) {        e.preventDefault();        const formData = new FormData(e.target);        const categoryData = {            category_name: formData.get('quickCategoryName')?.trim(),            description: formData.get('quickCategoryDescription')?.trim() || '',            is_active: formData.get('quickCategoryActive') === 'on' ? 1 : 0        };        const submitBtn = e.target.querySelector('button[type="submit"]');        const spinner = submitBtn.querySelector('.spinner-border');        try {            submitBtn.disabled = true;            if (spinner) spinner.classList.remove('d-none');            const result = await this.productManager.api.createCategory(categoryData);            if (result && result.success) {                const modal = bootstrap.Modal.getInstance(document.getElementById('quickAddCategoryModal'));                if (modal) modal.hide();                await this.refreshCategoryDropdown();                if (result.data && result.data.category_id) {                    this.fields.category.value = result.data.category_id;                    this.fields.category.classList.add('quick-add-highlight');                    setTimeout(() => this.fields.category.classList.remove('quick-add-highlight'), 2000);                }                e.target.reset();                this.productManager.showSuccess(`Category "${categoryData.category_name}" created successfully!`);            } else {                throw new Error(result?.message || 'Failed to create category');            }        } catch (error) {            console.error('Quick add category error:', error);            this.productManager.showError(error.message || 'Failed to create category');        } finally {            submitBtn.disabled = false;            if (spinner) spinner.classList.add('d-none');        }    }    async refreshCategoryDropdown(categories = null) {        try {            const categoriesData = categories || await this.productManager.api.loadCategoriesWithStats();            this.#populateEnhancedCategoryDropdown(categoriesData);            this.#updateCategoryStats(categoriesData);        } catch (error) {            console.error('Failed to refresh category dropdown:', error);            try {                const response = await this.productManager.api.getCategories();                if (response.success && response.data) {                    const categorySelect = document.getElementById('category');                     if (categorySelect) {                        const currentValue = categorySelect.value;                        categorySelect.innerHTML = '<option value="">Select a category</option>';                        response.data.forEach(category => {                            if (category.is_active) {                                const option = document.createElement('option');                                option.value = category.category_id;                                option.textContent = category.category_name;                                categorySelect.appendChild(option);                            }                        });                        if (currentValue && categorySelect.querySelector(`option[value="${currentValue}"]`)) {                            categorySelect.value = currentValue;                        }                    }                }            } catch (fallbackError) {                console.error('Fallback category refresh also failed:', fallbackError);            }        }    }    #initializeElements() {        this.productModal = document.getElementById('productModal');        this.productModalLabel = document.getElementById('productModalLabel');        this.productForm = document.getElementById('productForm');        this.saveBtn = document.getElementById('saveProductBtn');        this.saveSpinner = document.getElementById('saveSpinner');        this.deleteModal = document.getElementById('deleteModal');        this.deleteProductName = document.getElementById('deleteProductName');    this.deleteProductBarcode = document.getElementById('deleteProductBarcode');        this.confirmDeleteBtn = document.getElementById('confirmDeleteBtn');        this.deleteSpinner = document.getElementById('deleteSpinner');        this.fields = {            id: document.getElementById('productId'),            name: document.getElementById('productName'),            barcode: document.getElementById('barcode'),            category: document.getElementById('category'),            unit: document.getElementById('unit'),            price: document.getElementById('unitPrice'),            quantity: document.getElementById('stockQuantity'),            reorderLevel: document.getElementById('reorderLevel'),            expiryDate: document.getElementById('expiryDate'),            supplier: document.getElementById('supplier'),            description: document.getElementById('description'),            volume: document.getElementById('volume'),            weight: document.getElementById('weight'),            milkSource: document.getElementById('milkSource'),            fatContent: document.getElementById('fatContent'),            batchNumber: document.getElementById('batchNumber'),            coldChainRequired: document.getElementById('coldChainRequired'),            status: document.getElementById('status')        };    }    #setupEventListeners() {        if (this.productForm) {            this.productForm.addEventListener('submit', (e) => this.#handleFormSubmit(e));        }        if (this.fields.barcode) {            this.fields.barcode.addEventListener('input', (e) => {                e.target.value = e.target.value.toUpperCase();            });        }        if (this.confirmDeleteBtn) {            this.confirmDeleteBtn.addEventListener('click', () => this.#handleDeleteConfirm());        }        if (this.fields.category) {            this.fields.category.addEventListener('change', () => this.#handleCategoryChange());        }        if (this.productModal) {            this.productModal.addEventListener('hidden.bs.modal', () => {                console.log('Product modal hidden event triggered');                this.#resetModalState();                setTimeout(() => this.#forceModalCleanup(), 50);            });            this.productModal.addEventListener('hide.bs.modal', () => {                console.log('Product modal hide event triggered');            });        }        if (this.deleteModal) {            this.deleteModal.addEventListener('hidden.bs.modal', () => {                console.log('Delete modal hidden event triggered');                setTimeout(() => this.#forceModalCleanup(), 50);            });        }    }    openAddModal() {        console.log('Opening add product modal...');        this.currentEditingProductId = null;        this.productToDelete = null;        if (this.productModalLabel) {            this.productModalLabel.textContent = 'Add Highland Fresh Dairy Product';        }        if (this.productForm) {            this.productForm.reset();        }        ValidationUtils.clearValidationErrors();        if (this.fields.barcode) {            this.fields.barcode.disabled = false;        }        const statusContainer = document.getElementById('statusFieldContainer');        if (statusContainer) {            statusContainer.style.display = 'none';        }        const newProductInfo = document.getElementById('newProductInfo');        if (newProductInfo) {            newProductInfo.classList.remove('d-none');        }        const statusField = document.getElementById('status');        if (statusField) {            statusField.value = 'active';        }        this.#handleCategoryChange();        console.log('Modal state set for add mode - currentEditingProductId:', this.currentEditingProductId);        this.#showProductModal();    }    openEditModal(product) {        this.currentEditingProductId = product.product_id;        this.productModalLabel.textContent = 'Edit Highland Fresh Product';        this.#populateForm(product);        if (this.fields.barcode) {            this.fields.barcode.disabled = true;        }        ValidationUtils.clearValidationErrors();        const statusContainer = document.getElementById('statusFieldContainer');        if (statusContainer) {            statusContainer.style.display = 'block';        }        const newProductInfo = document.getElementById('newProductInfo');        if (newProductInfo) {            newProductInfo.classList.add('d-none');        }        this.#handleCategoryChange();        this.#showProductModal();    }    openDeleteModal(product) {        this.productToDelete = product;        if (this.deleteProductName) {            this.deleteProductName.textContent = product.name;        }        if (this.deleteProductBarcode) {            this.deleteProductBarcode.textContent = product.barcode;        }        this.#showDeleteModal();    }    getFormData() {        const formData = new FormData(this.productForm);        const getVal = (name, el) => {            const v = formData.get(name);            if (v !== null && v !== undefined) return ('' + v).trim();            if (el && el.value) return el.value.trim();            return '';        };        const getNum = (name, def = 0) => {            const raw = getVal(name, null);            if (raw === '') return def;            const n = parseFloat(raw);            return isNaN(n) ? def : n;        };        let derivedCategoryId = parseInt(getVal('category', this.fields.category)) || 0;        if (this.isEditing() && derivedCategoryId === 0 && this.currentEditingProductId != null) {            const existing = window.productManager?.products?.find(p => p.product_id === this.currentEditingProductId);            if (existing && existing.category_id) {                console.warn('[ProductModal] Category fallback applied during edit. Dropdown value missing, using existing product category_id:', existing.category_id);                derivedCategoryId = existing.category_id;            }        }        const payload = {            name: getVal('productName', this.fields.name),            barcode: getVal('barcode', this.fields.barcode),            category_id: derivedCategoryId,            unit_id: parseInt(getVal('unit', this.fields.unit)) || 0,            price: getNum('unitPrice'),            quantity_on_hand: getNum('stockQuantity', 0),            reorder_level: getNum('reorderLevel', 0),            description: getVal('description', this.fields.description) || null,            cost: 0,            max_stock_level: null,            supplier_id: parseInt(getVal('supplier', this.fields.supplier)) || null,            expiry_date: getVal('expiryDate', this.fields.expiryDate) || null,            is_active: this.isEditing() ? (getVal('status') === 'active' ? 1 : 0) : 1        };        console.log('[ProductModal] getFormData payload', {            editing: this.isEditing(),            currentEditingProductId: this.currentEditingProductId,            rawCategoryValue: getVal('category', this.fields.category),            finalCategoryId: payload.category_id        });        return payload;    }    setFormLoading(isLoading) {        if (this.saveBtn) {            this.saveBtn.disabled = isLoading;        }        if (this.saveSpinner) {            if (isLoading) {                this.saveSpinner.classList.remove('d-none');            } else {                this.saveSpinner.classList.add('d-none');            }        }    }    setDeleteLoading(isLoading) {        if (this.confirmDeleteBtn) {            this.confirmDeleteBtn.disabled = isLoading;        }        if (this.deleteSpinner) {            if (isLoading) {                this.deleteSpinner.classList.remove('d-none');            } else {                this.deleteSpinner.classList.add('d-none');            }        }    }    closeProductModal() {        if (this.productModal) {            try {                let modalInstance = bootstrap.Modal.getInstance(this.productModal);                if (modalInstance) {                    modalInstance.hide();                } else {                    modalInstance = new bootstrap.Modal(this.productModal);                    modalInstance.hide();                }                setTimeout(() => {                    this.#forceModalCleanup();                }, 200);            } catch (error) {                console.error('Error closing product modal:', error);                this.#forceModalCleanup();            }        }    }    closeDeleteModal() {        if (this.deleteModal) {            try {                let modalInstance = bootstrap.Modal.getInstance(this.deleteModal);                if (modalInstance) {                    modalInstance.hide();                } else {                    modalInstance = new bootstrap.Modal(this.deleteModal);                    modalInstance.hide();                }                setTimeout(() => {                    this.#forceModalCleanup();                }, 200);            } catch (error) {                console.error('Error closing delete modal:', error);                this.#forceModalCleanup();            }        }        this.productToDelete = null;    }    #forceModalCleanup() {        const visibleModals = document.querySelectorAll('.modal.show');        const backdrops = document.querySelectorAll('.modal-backdrop');        if (visibleModals.length === 0) {            backdrops.forEach(backdrop => backdrop.remove());            document.body.classList.remove('modal-open');            document.body.style.overflow = '';            document.body.style.paddingRight = '';        }        if (this.productModal && !this.productModal.classList.contains('show')) {            this.productModal.classList.remove('show');            this.productModal.style.display = 'none';            this.productModal.setAttribute('aria-hidden', 'true');        }        if (this.deleteModal && !this.deleteModal.classList.contains('show')) {            this.deleteModal.classList.remove('show');            this.deleteModal.style.display = 'none';            this.deleteModal.setAttribute('aria-hidden', 'true');        }    }    isEditing() {        return this.currentEditingProductId !== null;    }    getCurrentProductId() {        return this.currentEditingProductId;    }    getProductToDelete() {        return this.productToDelete;    }    async #handleFormSubmit(event) {        event.preventDefault();        await this.productManager.handleFormSubmit();    }    async #handleDeleteConfirm() {        await this.productManager.confirmDelete();    }    #populateForm(product) {    if (this.fields.id) this.fields.id.value = product.product_id;    if (this.fields.name) this.fields.name.value = product.name;    if (this.fields.barcode) this.fields.barcode.value = product.barcode || '';    if (this.fields.category) this.fields.category.value = product.category_id;    if (this.fields.unit) this.fields.unit.value = product.unit_id;    if (this.fields.price) this.fields.price.value = product.price;    if (this.fields.cost) this.fields.cost.value = product.cost || '';    if (this.fields.quantity) this.fields.quantity.value = product.quantity_on_hand;    if (this.fields.reorderLevel) this.fields.reorderLevel.value = product.reorder_level;    if (this.fields.maxStock) this.fields.maxStock.value = product.max_stock_level || '';    if (this.fields.description) this.fields.description.value = product.description || '';        const statusField = document.getElementById('status');        if (statusField) {            statusField.value = product.is_active ? 'active' : 'inactive';        }    }    #resetModalState() {        this.currentEditingProductId = null;        this.productToDelete = null;        ValidationUtils.clearValidationErrors();        if (this.productForm) {            this.productForm.reset();        }        if (this.productModalLabel) {            this.productModalLabel.textContent = 'Add Product';        }        if (this.fields.barcode) {            this.fields.barcode.disabled = false;        }        console.log('Modal state reset completed');    }    #showProductModal() {        if (this.productModal) {            new bootstrap.Modal(this.productModal).show();        }    }    #showDeleteModal() {        if (this.deleteModal) {            new bootstrap.Modal(this.deleteModal).show();        }    }    async refreshCategoryDropdown() {        try {            const categories = await this.productManager.api.loadCategoriesWithStats();            this.#populateEnhancedCategoryDropdown(categories);            console.log('Category dropdown refreshed successfully');        } catch (error) {            console.error('Failed to refresh category dropdown:', error);            this.productManager.showError('Failed to refresh categories');        }    }    openQuickAddCategory() {        const modal = new bootstrap.Modal(document.getElementById('quickAddCategoryModal'));        modal.show();        setTimeout(() => {            const nameField = document.getElementById('quickCategoryName');            if (nameField) nameField.focus();        }, 300);    }    openCategoryManagementFromDropdown() {        if (typeof openCategoryManagementModal === 'function') {            openCategoryManagementModal();        } else {            console.warn('Category management modal function not available');        }    }    async showCategoryHierarchy() {        try {            const categories = await this.productManager.api.loadCategoriesWithStats();            this.#renderCategoryHierarchy(categories);            const modal = new bootstrap.Modal(document.getElementById('categoryHierarchyModal'));            modal.show();        } catch (error) {            console.error('Failed to load category hierarchy:', error);            this.productManager.showError('Failed to load category hierarchy');        }    }    #renderCategoryHierarchy(categories) {        const treeContainer = document.getElementById('categoryHierarchyTree');        if (!treeContainer) return;        const sortedCategories = categories.sort((a, b) => a.category_name.localeCompare(b.category_name));        let html = '';        sortedCategories.forEach(category => {            const productCount = category.product_count || 0;            const statusClass = category.is_active ? 'text-success' : 'text-muted';            const statusIcon = category.is_active ? 'bi-check-circle' : 'bi-x-circle';            html += `                <div class="category-item">                    <div class="d-flex justify-content-between align-items-center">                        <div>                            <i class="bi ${statusIcon} ${statusClass}"></i>                            <strong>${category.category_name}</strong>                            ${category.description ? `<br><small class="text-muted">${category.description}</small>` : ''}                        </div>                        <div class="category-stats">                            <span class="badge bg-secondary">${productCount} products</span>                            ${!category.is_active ? '<span class="badge bg-warning">Inactive</span>' : ''}                        </div>                    </div>                </div>            `;        });        if (html === '') {            html = '<div class="text-center text-muted py-4">No categories found</div>';        }        treeContainer.innerHTML = html;    }    #handleCategoryChange() {        const categoryField = this.fields.category;        const volumeContainer = document.getElementById('volumeFieldContainer');        const weightContainer = document.getElementById('weightFieldContainer');        if (!categoryField || !volumeContainer || !weightContainer) {            return;        }        const selectedCategoryId = categoryField.value;        const selectedOption = categoryField.querySelector(`option[value="${selectedCategoryId}"]`);        if (!selectedOption) {            volumeContainer.style.display = 'none';            weightContainer.style.display = 'none';            return;        }        const categoryName = selectedOption.textContent.toLowerCase();        const liquidCategories = [            'liquid milk',            'flavored milk',             'milk bar beverages',            'cold beverages',            'hot beverages',            'specialty beverages'        ];        const isLiquidProduct = liquidCategories.some(liquid =>             categoryName.includes(liquid)        );        if (isLiquidProduct) {            volumeContainer.style.display = 'block';            weightContainer.style.display = 'none';            const volumeField = document.getElementById('volume');            const weightField = document.getElementById('weight');            if (volumeField) volumeField.required = true;            if (weightField) weightField.required = false;        } else {            volumeContainer.style.display = 'none';            weightContainer.style.display = 'block';            const volumeField = document.getElementById('volume');            const weightField = document.getElementById('weight');            if (volumeField) volumeField.required = false;            if (weightField) weightField.required = true;        }    }}window.ProductModal = ProductModal;window.openQuickAddCategory = function() {    if (window.productModal) {        window.productModal.openQuickAddCategory();    } else {        console.warn('ProductModal instance not available');    }};window.openCategoryManagementFromDropdown = function() {    if (window.productModal) {        window.productModal.openCategoryManagementFromDropdown();    } else if (typeof openCategoryManagementModal === 'function') {        openCategoryManagementModal();    } else {        console.warn('Category management functions not available');    }};window.refreshCategoryDropdown = function() {    if (window.productModal) {        window.productModal.refreshCategoryDropdown();    } else {        console.warn('ProductModal instance not available');    }};window.showCategoryHierarchy = function() {    if (window.productModal) {        window.productModal.showCategoryHierarchy();    } else {        console.warn('ProductModal instance not available');    }};window.openCategoryManagementFromHierarchy = function() {    const hierarchyModal = bootstrap.Modal.getInstance(document.getElementById('categoryHierarchyModal'));    if (hierarchyModal) {        hierarchyModal.hide();    }    setTimeout(() => {        if (typeof openCategoryManagementModal === 'function') {            openCategoryManagementModal();        }    }, 300);};