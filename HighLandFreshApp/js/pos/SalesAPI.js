class SalesAPI {    constructor() {        this.baseUrl = '../api/SalesAPI.php';    }    async createSale(saleData, onSuccess = null, onError = null) {        try {            const response = await fetch(this.baseUrl, {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                    'Accept': 'application/json'                },                credentials: 'include',                 body: JSON.stringify(saleData)            });            const result = await response.json();            if (response.ok && result.success) {                if (onSuccess) {                    onSuccess(result.data, result.message);                }                return result;            } else {                const errorMessage = result.message || 'Failed to process sale';                if (onError) {                    onError(errorMessage, result);                }                throw new Error(errorMessage);            }        } catch (error) {            console.error('SalesAPI createSale error:', error);            if (onError) {                onError(error.message, error);            }            throw error;        }    }    async getAllSales(onSuccess = null, onError = null) {        try {            const response = await fetch(this.baseUrl, {                method: 'GET',                headers: {                    'Accept': 'application/json'                },                credentials: 'include'            });            const result = await response.json();            if (response.ok && result.success) {                if (onSuccess) {                    onSuccess(result.data, result.message);                }                return result;            } else {                const errorMessage = result.message || 'Failed to retrieve sales';                if (onError) {                    onError(errorMessage, result);                }                throw new Error(errorMessage);            }        } catch (error) {            console.error('SalesAPI getAllSales error:', error);            if (onError) {                onError(error.message, error);            }            throw error;        }    }    validateSaleData(saleData) {        const errors = [];        if (!saleData.items || !Array.isArray(saleData.items)) {            errors.push('Items array is required');        } else if (saleData.items.length === 0) {            errors.push('At least one item must be added to the sale');        } else {            saleData.items.forEach((item, index) => {                if (!item.product_id) {                    errors.push(`Item ${index + 1}: Product selection is required`);                }                if (!item.quantity || item.quantity <= 0) {                    errors.push(`Item ${index + 1}: Valid quantity is required`);                }            });        }        if (saleData.payment_received !== undefined) {            const payment = parseFloat(saleData.payment_received);            if (isNaN(payment) || payment < 0) {                errors.push('Payment received must be a valid positive number');            }        }        if (saleData.tax_rate !== undefined) {            const taxRate = parseFloat(saleData.tax_rate);            if (isNaN(taxRate) || taxRate < 0 || taxRate > 1) {                errors.push('Tax rate must be between 0 and 1 (e.g., 0.12 for 12%)');            }        }        if (saleData.discount_amount !== undefined) {            const discount = parseFloat(saleData.discount_amount);            if (isNaN(discount) || discount < 0) {                errors.push('Discount amount must be a valid positive number');            }        }        return {            isValid: errors.length === 0,            errors: errors        };    }    calculateTotals(items, options = {}) {        const taxRate = options.tax_rate || 0.12;        const additionalDiscount = options.discount_amount || 0;        let subtotal = 0;        let totalDiscount = 0;        items.forEach(item => {            const lineTotal = (item.unit_price || 0) * (item.quantity || 0);            const itemDiscount = lineTotal * ((item.discount_percent || 0) / 100);            subtotal += lineTotal;            totalDiscount += itemDiscount;        });        totalDiscount += additionalDiscount;        const taxableAmount = subtotal - additionalDiscount;        const taxAmount = taxableAmount * taxRate;        const totalAmount = subtotal - additionalDiscount + taxAmount;        return {            subtotal: parseFloat(subtotal.toFixed(2)),            tax_rate: taxRate,            tax_amount: parseFloat(taxAmount.toFixed(2)),            discount_amount: parseFloat(totalDiscount.toFixed(2)),            total_amount: parseFloat(totalAmount.toFixed(2))        };    }    formatCurrency(amount) {        return new Intl.NumberFormat('en-PH', {            style: 'currency',            currency: 'PHP',            minimumFractionDigits: 2        }).format(amount);    }    createReceipt(saleResult, items, customerInfo = {}) {        const now = new Date();        return {            sale_number: saleResult.sale_number,            sale_date: now.toLocaleDateString('en-PH'),            sale_time: now.toLocaleTimeString('en-PH'),            customer_name: customerInfo.customer_name || 'Walk-in Customer',            customer_phone: customerInfo.customer_phone || '',            items: items.map(item => ({                product_name: item.product_name || item.name,                quantity: item.quantity,                unit_price: this.formatCurrency(item.unit_price),                line_total: this.formatCurrency(item.line_total || (item.unit_price * item.quantity))            })),            subtotal: this.formatCurrency(saleResult.subtotal || 0),            tax_amount: this.formatCurrency(saleResult.tax_amount || 0),            discount_amount: this.formatCurrency(saleResult.discount_amount || 0),            total_amount: this.formatCurrency(saleResult.total_amount),            payment_received: this.formatCurrency(saleResult.payment_received || saleResult.total_amount),            change_amount: this.formatCurrency(saleResult.change_amount || 0)        };    }}if (typeof module !== 'undefined' && module.exports) {    module.exports = SalesAPI;} else {    window.SalesAPI = SalesAPI;}