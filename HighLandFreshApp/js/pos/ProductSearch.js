class ProductSearch {    constructor(options = {}) {        this.apiUrl = options.apiUrl || '../api/ProductsAPI.php';        this.searchInput = options.searchInput || null;        this.resultsContainer = options.resultsContainer || null;        this.onProductSelect = options.onProductSelect || null;        this.minSearchLength = options.minSearchLength || 2;        this.searchDelay = options.searchDelay || 300;        this.searchTimeout = null;        this.currentResults = [];        this.selectedIndex = -1;        this.init();    }    init() {        if (this.searchInput) {            this.setupEventListeners();        }        this.loadInitialProducts();    }    setupEventListeners() {        this.searchInput.addEventListener('input', (e) => {            this.handleSearchInput(e.target.value);        });        this.searchInput.addEventListener('keydown', (e) => {            this.handleKeyDown(e);        });        this.searchInput.addEventListener('focus', () => {            if (this.searchInput.value === this.searchInput.placeholder) {                this.searchInput.value = '';            }        });        this.searchInput.addEventListener('keypress', (e) => {            if (e.key === 'Enter') {                e.preventDefault();                this.handleBarcodeSearch(this.searchInput.value);            }        });        document.addEventListener('click', (e) => {            if (!this.searchInput.contains(e.target) &&                 !this.resultsContainer.contains(e.target)) {                this.hideResults();            }        });    }    handleSearchInput(searchTerm) {        clearTimeout(this.searchTimeout);        if (searchTerm.length < this.minSearchLength) {            this.hideResults();            return;        }        this.searchTimeout = setTimeout(() => {            this.searchProducts(searchTerm);        }, this.searchDelay);    }    handleKeyDown(e) {        const results = this.resultsContainer.querySelectorAll('.product-result-item');        switch (e.key) {            case 'ArrowDown':                e.preventDefault();                this.selectedIndex = Math.min(this.selectedIndex + 1, results.length - 1);                this.updateSelection(results);                break;            case 'ArrowUp':                e.preventDefault();                this.selectedIndex = Math.max(this.selectedIndex - 1, -1);                this.updateSelection(results);                break;            case 'Enter':                e.preventDefault();                if (this.selectedIndex >= 0 && results[this.selectedIndex]) {                    this.selectProduct(this.currentResults[this.selectedIndex]);                }                break;            case 'Escape':                this.hideResults();                this.searchInput.blur();                break;        }    }    async handleBarcodeSearch(barcode) {        if (barcode.length >= 8) {             try {                const products = await this.searchProductsByBarcode(barcode);                if (products.length === 1) {                    this.selectProduct(products[0]);                } else if (products.length > 1) {                    this.displayResults(products);                } else {                    this.searchProducts(barcode);                }            } catch (error) {                console.error('Barcode search error:', error);                this.showError('Failed to search by barcode');            }        }    }    async searchProducts(searchTerm) {        try {            const response = await fetch(`${this.apiUrl}?search=${encodeURIComponent(searchTerm)}`, {                method: 'GET',                headers: {                    'Accept': 'application/json'                },                credentials: 'include'            });            const result = await response.json();            if (result.success) {                this.currentResults = result.data || [];                this.displayResults(this.currentResults);            } else {                this.showError(result.message || 'Search failed');            }        } catch (error) {            console.error('Product search error:', error);            this.showError('Failed to search products');        }    }    async searchProductsByBarcode(barcode) {        try {            const response = await fetch(`${this.apiUrl}?barcode=${encodeURIComponent(barcode)}`, {                method: 'GET',                headers: {                    'Accept': 'application/json'                },                credentials: 'include'            });            const result = await response.json();            return result.success ? (result.data || []) : [];        } catch (error) {            console.error('Barcode search error:', error);            return [];        }    }    async loadInitialProducts() {        try {            const response = await fetch(`${this.apiUrl}?active=1&limit=20`, {                method: 'GET',                headers: {                    'Accept': 'application/json'                },                credentials: 'include'            });            const result = await response.json();            if (result.success) {                this.initialProducts = result.data || [];            }        } catch (error) {            console.error('Failed to load initial products:', error);        }    }    displayResults(products) {        if (!this.resultsContainer) return;        this.selectedIndex = -1;        this.resultsContainer.innerHTML = '';        if (products.length === 0) {            this.resultsContainer.innerHTML = `                <div class="no-results">                    <i class="fas fa-search"></i>                    <p>No products found</p>                </div>            `;            this.showResults();            return;        }        products.forEach((product, index) => {            const resultItem = this.createResultItem(product, index);            this.resultsContainer.appendChild(resultItem);        });        this.showResults();    }    createResultItem(product, index) {        const item = document.createElement('div');        item.className = 'product-result-item';        item.dataset.index = index;        const stockStatus = this.getStockStatus(product);        const stockClass = stockStatus.level;        item.innerHTML = `            <div class="product-info">                <div class="product-name">${this.escapeHtml(product.name)}</div>                <div class="product-details">                    <span class="product-barcode">Barcode: ${this.escapeHtml(product.barcode || 'N/A')}</span>                    <span class="product-price">â‚±${parseFloat(product.price || 0).toFixed(2)}</span>                </div>                <div class="stock-info">                    <span class="stock-level ${stockClass}">${stockStatus.text}</span>                    <span class="stock-quantity">(${product.quantity_on_hand || 0} available)</span>                </div>            </div>            <div class="product-actions">                <button type="button" class="btn btn-sm btn-primary add-to-cart"                         ${stockStatus.level === 'out-of-stock' ? 'disabled' : ''}>                    <i class="fas fa-plus"></i> Add                </button>            </div>        `;        item.addEventListener('click', () => {            this.selectProduct(product);        });        const addButton = item.querySelector('.add-to-cart');        addButton.addEventListener('click', (e) => {            e.stopPropagation();            this.selectProduct(product);        });        return item;    }    getStockStatus(product) {        const stock = parseFloat(product.quantity_on_hand || 0);        const reorderLevel = parseFloat(product.reorder_level || 10);        if (stock <= 0) {            return { level: 'out-of-stock', text: 'Out of Stock' };        } else if (stock <= reorderLevel) {            return { level: 'low-stock', text: 'Low Stock' };        } else {            return { level: 'in-stock', text: 'In Stock' };        }    }    updateSelection(results) {        results.forEach((item, index) => {            item.classList.toggle('selected', index === this.selectedIndex);        });        if (this.selectedIndex >= 0 && results[this.selectedIndex]) {            results[this.selectedIndex].scrollIntoView({                block: 'nearest',                behavior: 'smooth'            });        }    }    selectProduct(product) {        if (this.onProductSelect) {            this.onProductSelect(product);        }        this.hideResults();        this.searchInput.value = '';        this.searchInput.focus();    }    showResults() {        if (this.resultsContainer) {            this.resultsContainer.style.display = 'block';            this.resultsContainer.classList.add('show');        }    }    hideResults() {        if (this.resultsContainer) {            this.resultsContainer.style.display = 'none';            this.resultsContainer.classList.remove('show');        }        this.selectedIndex = -1;    }    showError(message) {        if (this.resultsContainer) {            this.resultsContainer.innerHTML = `                <div class="search-error">                    <i class="fas fa-exclamation-triangle"></i>                    <p>${this.escapeHtml(message)}</p>                </div>            `;            this.showResults();        }    }    escapeHtml(text) {        const div = document.createElement('div');        div.textContent = text;        return div.innerHTML;    }    clear() {        if (this.searchInput) {            this.searchInput.value = '';        }        this.hideResults();        this.currentResults = [];    }    focus() {        if (this.searchInput) {            this.searchInput.focus();        }    }    onProductSelect(callback) {        this.onProductSelect = callback;    }}if (typeof module !== 'undefined' && module.exports) {    module.exports = ProductSearch;} else {    window.ProductSearch = ProductSearch;}