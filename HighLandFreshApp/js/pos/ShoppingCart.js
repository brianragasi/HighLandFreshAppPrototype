class ShoppingCart {    constructor(options = {}) {        this.container = options.container || null;        this.onCartUpdate = options.onCartUpdate || null;        this.onCartEmpty = options.onCartEmpty || null;        this.taxRate = options.taxRate || 0.12;         this.currency = options.currency || 'PHP';        this.persistCart = options.persistCart || false;        this.items = [];        this.cartDiscount = 0;        this.cartDiscountType = 'amount';         this.init();    }    init() {        if (this.persistCart) {            this.loadFromStorage();        }        this.render();    }    addItem(product, quantity = 1, unitPrice = null) {        if (!product || !product.product_id) {            this.showError('Invalid product');            return false;        }        if (quantity <= 0) {            this.showError('Quantity must be greater than 0');            return false;        }        const availableStock = parseFloat(product.quantity_on_hand || 0);        const existingItem = this.findItem(product.product_id);        const currentQuantity = existingItem ? existingItem.quantity : 0;        const totalQuantity = currentQuantity + quantity;        if (totalQuantity > availableStock) {            this.showError(`Insufficient stock. Available: ${availableStock}, Requested: ${totalQuantity}`);            return false;        }        if (existingItem) {            existingItem.quantity = totalQuantity;            this.updateItemTotal(existingItem);        } else {            const cartItem = {                product_id: product.product_id,                name: product.name,                barcode: product.barcode || '',                quantity: quantity,                unit_price: unitPrice !== null ? parseFloat(unitPrice) : parseFloat(product.price || 0),                original_price: parseFloat(product.price || 0),                discount_percent: 0,                discount_amount: 0,                line_total: 0,                available_stock: availableStock            };            this.updateItemTotal(cartItem);            this.items.push(cartItem);        }        this.updateCart();        return true;    }    removeItem(productId) {        const index = this.items.findIndex(item => item.product_id === productId);        if (index !== -1) {            this.items.splice(index, 1);            this.updateCart();        }    }    updateQuantity(productId, quantity) {        const item = this.findItem(productId);        if (!item) return false;        if (quantity <= 0) {            this.removeItem(productId);            return true;        }        if (quantity > item.available_stock) {            this.showError(`Insufficient stock. Available: ${item.available_stock}`);            return false;        }        item.quantity = quantity;        this.updateItemTotal(item);        this.updateCart();        return true;    }    updateUnitPrice(productId, unitPrice) {        const item = this.findItem(productId);        if (item && unitPrice >= 0) {            item.unit_price = parseFloat(unitPrice);            this.updateItemTotal(item);            this.updateCart();        }    }    applyItemDiscount(productId, discount, type = 'percent') {        const item = this.findItem(productId);        if (!item) return;        discount = parseFloat(discount) || 0;        if (type === 'percent') {            item.discount_percent = Math.max(0, Math.min(100, discount));            item.discount_amount = (item.unit_price * item.quantity) * (item.discount_percent / 100);        } else {            const maxDiscount = item.unit_price * item.quantity;            item.discount_amount = Math.max(0, Math.min(maxDiscount, discount));            item.discount_percent = maxDiscount > 0 ? (item.discount_amount / maxDiscount) * 100 : 0;        }        this.updateItemTotal(item);        this.updateCart();    }    applyCartDiscount(discount, type = 'amount') {        this.cartDiscount = parseFloat(discount) || 0;        this.cartDiscountType = type;        this.updateCart();    }    findItem(productId) {        return this.items.find(item => item.product_id === productId) || null;    }    updateItemTotal(item) {        const subtotal = item.unit_price * item.quantity;        item.line_total = subtotal - item.discount_amount;    }    calculateTotals() {        const subtotal = this.items.reduce((sum, item) => sum + item.line_total, 0);        let cartDiscountAmount = 0;        if (this.cartDiscountType === 'percent') {            cartDiscountAmount = subtotal * (this.cartDiscount / 100);        } else {            cartDiscountAmount = Math.min(this.cartDiscount, subtotal);        }        const taxableAmount = subtotal - cartDiscountAmount;        const taxAmount = taxableAmount * this.taxRate;        const totalAmount = taxableAmount + taxAmount;        const itemDiscountTotal = this.items.reduce((sum, item) => sum + item.discount_amount, 0);        const totalDiscountAmount = itemDiscountTotal + cartDiscountAmount;        return {            subtotal: parseFloat(subtotal.toFixed(2)),            cart_discount: parseFloat(cartDiscountAmount.toFixed(2)),            total_discount: parseFloat(totalDiscountAmount.toFixed(2)),            tax_rate: this.taxRate,            tax_amount: parseFloat(taxAmount.toFixed(2)),            total_amount: parseFloat(totalAmount.toFixed(2)),            items_count: this.items.length,            total_quantity: this.items.reduce((sum, item) => sum + item.quantity, 0)        };    }    getSaleData(customerInfo = {}, paymentInfo = {}) {        const totals = this.calculateTotals();        return {            items: this.items.map(item => ({                product_id: item.product_id,                quantity: item.quantity,                unit_price: item.unit_price,                discount_percent: item.discount_percent,                discount_amount: item.discount_amount            })),            customer_name: customerInfo.customer_name || null,            customer_phone: customerInfo.customer_phone || null,            tax_rate: this.taxRate,            discount_amount: totals.cart_discount,            payment_received: paymentInfo.payment_received || totals.total_amount,            notes: customerInfo.notes || null        };    }    clear() {        this.items = [];        this.cartDiscount = 0;        this.updateCart();        if (this.onCartEmpty) {            this.onCartEmpty();        }    }    isEmpty() {        return this.items.length === 0;    }    getItemCount() {        return this.items.length;    }    getTotalQuantity() {        return this.items.reduce((sum, item) => sum + item.quantity, 0);    }    updateCart() {        this.render();        if (this.persistCart) {            this.saveToStorage();        }        if (this.onCartUpdate) {            this.onCartUpdate(this.calculateTotals(), this.items);        }    }    render() {        if (!this.container) return;        const totals = this.calculateTotals();        if (this.isEmpty()) {            this.renderEmptyCart();            return;        }        let html = `            <div class="cart-header">                <h5><i class="fas fa-shopping-cart"></i> Cart (${totals.items_count} items)</h5>                <button type="button" class="btn btn-sm btn-outline-danger clear-cart">                    <i class="fas fa-trash"></i> Clear                </button>            </div>            <div class="cart-items">        `;        this.items.forEach(item => {            html += this.renderCartItem(item);        });        html += `            </div>            <div class="cart-totals">                ${this.renderCartTotals(totals)}            </div>        `;        this.container.innerHTML = html;        this.attachEventListeners();    }    renderEmptyCart() {        this.container.innerHTML = `            <div class="empty-cart">                <i class="fas fa-shopping-cart"></i>                <p>Cart is empty</p>                <small class="text-muted">Search for products to add to cart</small>            </div>        `;    }    renderCartItem(item) {        return `            <div class="cart-item" data-product-id="${item.product_id}">                <div class="item-info">                    <div class="item-name">${this.escapeHtml(item.name)}</div>                    <div class="item-barcode text-muted">${this.escapeHtml(item.barcode)}</div>                </div>                <div class="item-controls">                    <div class="quantity-controls">                        <button type="button" class="btn btn-sm btn-outline-secondary qty-decrease">-</button>                        <input type="number" class="form-control form-control-sm qty-input"                                value="${item.quantity}" min="1" max="${item.available_stock}">                        <button type="button" class="btn btn-sm btn-outline-secondary qty-increase">+</button>                    </div>                    <div class="price-controls">                        <span class="unit-price">₱${item.unit_price.toFixed(2)}</span>                        ${item.discount_amount > 0 ? `<span class="discount">-₱${item.discount_amount.toFixed(2)}</span>` : ''}                    </div>                    <div class="line-total">₱${item.line_total.toFixed(2)}</div>                    <button type="button" class="btn btn-sm btn-outline-danger remove-item">                        <i class="fas fa-times"></i>                    </button>                </div>            </div>        `;    }    renderCartTotals(totals) {        return `            <div class="totals-row">                <span>Subtotal:</span>                <span>₱${totals.subtotal.toFixed(2)}</span>            </div>            ${totals.total_discount > 0 ? `                <div class="totals-row discount">                    <span>Discount:</span>                    <span>-₱${totals.total_discount.toFixed(2)}</span>                </div>            ` : ''}            <div class="totals-row">                <span>Tax (${(this.taxRate * 100).toFixed(0)}%):</span>                <span>₱${totals.tax_amount.toFixed(2)}</span>            </div>            <div class="totals-row total">                <span><strong>Total:</strong></span>                <span><strong>₱${totals.total_amount.toFixed(2)}</strong></span>            </div>        `;    }    attachEventListeners() {        const clearBtn = this.container.querySelector('.clear-cart');        if (clearBtn) {            clearBtn.addEventListener('click', () => {                if (confirm('Clear all items from cart?')) {                    this.clear();                }            });        }        this.container.querySelectorAll('.cart-item').forEach(itemEl => {            const productId = parseInt(itemEl.dataset.productId);            const qtyInput = itemEl.querySelector('.qty-input');            const qtyDecrease = itemEl.querySelector('.qty-decrease');            const qtyIncrease = itemEl.querySelector('.qty-increase');            const removeBtn = itemEl.querySelector('.remove-item');            qtyInput.addEventListener('change', (e) => {                const quantity = parseInt(e.target.value) || 1;                this.updateQuantity(productId, quantity);            });            qtyDecrease.addEventListener('click', () => {                const currentQty = parseInt(qtyInput.value) || 1;                this.updateQuantity(productId, currentQty - 1);            });            qtyIncrease.addEventListener('click', () => {                const currentQty = parseInt(qtyInput.value) || 1;                this.updateQuantity(productId, currentQty + 1);            });            removeBtn.addEventListener('click', () => {                this.removeItem(productId);            });        });    }    saveToStorage() {        try {            const cartData = {                items: this.items,                cartDiscount: this.cartDiscount,                cartDiscountType: this.cartDiscountType,                taxRate: this.taxRate,                timestamp: Date.now()            };            localStorage.setItem('highland_fresh_cart', JSON.stringify(cartData));        } catch (error) {            console.error('Failed to save cart to storage:', error);        }    }    loadFromStorage() {        try {            const stored = localStorage.getItem('highland_fresh_cart');            if (stored) {                const cartData = JSON.parse(stored);                const maxAge = 24 * 60 * 60 * 1000;                 if (Date.now() - cartData.timestamp < maxAge) {                    this.items = cartData.items || [];                    this.cartDiscount = cartData.cartDiscount || 0;                    this.cartDiscountType = cartData.cartDiscountType || 'amount';                    this.taxRate = cartData.taxRate || 0.12;                }            }        } catch (error) {            console.error('Failed to load cart from storage:', error);        }    }    clearStorage() {        try {            localStorage.removeItem('highland_fresh_cart');        } catch (error) {            console.error('Failed to clear cart storage:', error);        }    }    showError(message) {        alert(message);    }    escapeHtml(text) {        const div = document.createElement('div');        div.textContent = text || '';        return div.innerHTML;    }}if (typeof module !== 'undefined' && module.exports) {    module.exports = ShoppingCart;} else {    window.ShoppingCart = ShoppingCart;}