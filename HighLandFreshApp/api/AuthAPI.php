<?phprequire_once __DIR__ . '/BaseAPI.php';require_once __DIR__ . '/SessionConfig.php';class AuthAPI extends BaseAPI{    public function route(): void    {        $this->initializeSession();        $operation = $this->getOperation() ?: 'authenticateUser';        $input = $this->getJsonInput() ?? [];        $this->handle(function () use ($operation, $input) {            switch ($operation) {                case 'authenticateUser':                    $this->authenticateUser($input);                    break;                default:                    $this->respondError('Unsupported operation', 400, ['operation' => $operation]);                    break;            }        });    }    public function authenticateUser(array $input): void    {        $missing = $this->requireParams($input, ['username', 'password']);        if ($missing) {            $this->respondError('Username and password are required', 400, ['missing' => $missing]);            return;        }        $username = trim((string)$input['username']);        $password = (string)$input['password'];        if ($username === '' || $password === '') {            $this->respondError('Username and password cannot be empty', 400);            return;        }        if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {            $this->respondError('Invalid username format', 400);            return;        }        $stmt = $this->db()->prepare(            "SELECT u.user_id, u.username, u.password_hash, u.is_active, ur.role_name as role              FROM users u              JOIN user_roles ur ON u.role_id = ur.role_id              WHERE u.username = ? AND u.is_active = 1              LIMIT 1"        );        $stmt->execute([$username]);        $user = $stmt->fetch();        if (!$user || !$user['is_active'] || !password_verify($password, $user['password_hash'])) {            $this->respondError('Invalid credentials', 401);            return;        }        session_regenerate_id(true);        $_SESSION['user_id'] = $user['user_id'];        $_SESSION['username'] = $user['username'];        $_SESSION['role'] = $user['role'];        $_SESSION['login_time'] = time();        $_SESSION['timeout'] = time() + (30 * 60);        $updateStmt = $this->db()->prepare('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE user_id = ?');        $updateStmt->execute([$user['user_id']]);        $this->respond([            'success' => true,            'user' => [                'id' => $user['user_id'],                'username' => $user['username'],                'role' => $user['role'],            ],        ], 200);    }}if (!defined('TESTING') && basename($_SERVER['SCRIPT_NAME']) === 'AuthAPI.php') {    $api = new AuthAPI(['methods' => 'POST, OPTIONS']);    $api->route();}