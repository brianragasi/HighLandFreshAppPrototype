<?phprequire_once __DIR__ . '/BaseAPI.php';require_once __DIR__ . '/SessionConfig.php';class SalesAPI extends BaseAPI{    public function route(): void    {        $this->initializeSession();        $method = $this->getMethod();        $input = $this->getJsonInput() ?? [];        $operation = $this->getOperation();        $this->handle(function() use ($method, $operation, $input) {            switch ($operation ?: $method) {                case 'GET':                    $this->getAllSales();                    break;                case 'POST':                    $this->createSale($input);                    break;                case 'history':                    $this->getTransactionHistory();                    break;                case 'details':                    $this->getTransactionDetails();                    break;                case 'receipt':                    $this->getReceiptData();                    break;                case 'getTodayStats':                    $this->getTodayStats();                    break;                default:                    $this->respondError('Unsupported operation', 400, ['operation' => $operation ?: $method]);                    break;            }        });    }    public function createSale(array $input): void    {        if (!isAuthenticated()) {            $this->respondError('Authentication required to process sales', 401);            return;        }        if (!hasRole(['Sales', 'Cashier', 'Admin'])) {            $this->respondError('Sales Staff or Administrator access required to process sales', 403);            return;        }        $required = ['items'];        $missing = $this->requireParams($input, $required);        if ($missing) {            $this->respondError('Missing required fields: ' . implode(', ', $missing), 400);            return;        }        if (empty($input['items']) || !is_array($input['items'])) {            $this->respondError('Items array is required and must contain at least one item', 400);            return;        }        $pdo = $this->db();        try {            $pdo->beginTransaction();            $saleNumber = $this->generateSaleNumber($pdo);            $userId = $_SESSION['user_id'];            $validatedItems = $this->validateSaleItems($input['items'], $pdo);            $totals = $this->calculateSaleTotals($validatedItems, $input);            $saleId = $this->insertSaleRecord($pdo, $saleNumber, $userId, $totals, $input);            $this->insertSaleItems($pdo, $saleId, $validatedItems);            $pdo->commit();            $this->respondSuccess([                'sale_id' => $saleId,                'sale_number' => $saleNumber,                'total_amount' => $totals['total_amount'],                'items_count' => count($validatedItems)            ]);        } catch (Exception $e) {            $pdo->rollBack();            $this->respondError('Failed to process sale: ' . $e->getMessage(), 500);        }    }    public function getAllSales(): void    {        if (!isAuthenticated()) {            $this->respondError('Authentication required', 401);            return;        }        if (!hasRole(['Admin'])) {            $this->respondError('Administrator access required to view all sales', 403);            return;        }        $pdo = $this->db();        try {            $sql = "                SELECT                     s.sale_id,                    s.sale_number,                    s.customer_name,                    s.customer_phone,                    s.subtotal,                    s.tax_amount,                    s.discount_amount,                    s.total_amount,                    s.payment_received,                    s.change_amount,                    s.sale_date,                    u.username as cashier_name,                    pm.method_name as payment_method,                    ts.status_name as status,                    COUNT(si.sale_item_id) as items_count                FROM sales s                LEFT JOIN users u ON s.user_id = u.user_id                LEFT JOIN payment_methods pm ON s.payment_method_id = pm.payment_method_id                LEFT JOIN transaction_statuses ts ON s.status_id = ts.status_id                LEFT JOIN sale_items si ON s.sale_id = si.sale_id                GROUP BY s.sale_id                ORDER BY s.sale_date DESC            ";            $stmt = $pdo->prepare($sql);            $stmt->execute();            $sales = $stmt->fetchAll(PDO::FETCH_ASSOC);            $this->respondSuccess($sales);        } catch (Exception $e) {            $this->respondError('Failed to retrieve sales: ' . $e->getMessage(), 500);        }    }    private function generateSaleNumber(PDO $pdo): string    {        $year = date('Y');        $prefix = "SALE{$year}";        $sql = "SELECT sale_number FROM sales WHERE sale_number LIKE ? ORDER BY sale_number DESC LIMIT 1";        $stmt = $pdo->prepare($sql);        $stmt->execute(["{$prefix}%"]);        $lastSale = $stmt->fetchColumn();        if ($lastSale) {            $sequence = intval(substr($lastSale, -4)) + 1;        } else {            $sequence = 1;        }        return $prefix . sprintf('%04d', $sequence);    }    private function validateSaleItems(array $items, PDO $pdo): array    {        $validatedItems = [];        foreach ($items as $index => $item) {            if (!isset($item['product_id']) || !isset($item['quantity'])) {                throw new Exception("Item at index {$index}: product_id and quantity are required");            }            $productId = (int)$item['product_id'];            $quantity = (float)$item['quantity'];            if ($quantity <= 0) {                throw new Exception("Item at index {$index}: quantity must be greater than 0");            }            $sql = "SELECT product_id, name, price, quantity_on_hand FROM products WHERE product_id = ?";            $stmt = $pdo->prepare($sql);            $stmt->execute([$productId]);            $product = $stmt->fetch(PDO::FETCH_ASSOC);            if (!$product) {                throw new Exception("Item at index {$index}: Product not found (ID: {$productId})");            }            if ($product['quantity_on_hand'] < $quantity) {                throw new Exception("Item at index {$index}: Insufficient stock for {$product['name']}. Available: {$product['quantity_on_hand']}, Requested: {$quantity}");            }            $unitPrice = isset($item['unit_price']) ? (float)$item['unit_price'] : (float)$product['price'];            $discountPercent = isset($item['discount_percent']) ? (float)$item['discount_percent'] : 0;            $discountAmount = ($unitPrice * $quantity) * ($discountPercent / 100);            $lineTotal = ($unitPrice * $quantity) - $discountAmount;            $validatedItems[] = [                'product_id' => $productId,                'product_name' => $product['name'],                'quantity' => $quantity,                'unit_price' => $unitPrice,                'discount_percent' => $discountPercent,                'discount_amount' => $discountAmount,                'line_total' => $lineTotal,                'available_stock' => $product['quantity_on_hand']            ];        }        return $validatedItems;    }    private function calculateSaleTotals(array $validatedItems, array $input): array    {        $subtotal = array_sum(array_column($validatedItems, 'line_total'));        $discountAmount = array_sum(array_column($validatedItems, 'discount_amount'));        $additionalDiscount = isset($input['discount_amount']) ? (float)$input['discount_amount'] : 0;        $totalDiscount = $discountAmount + $additionalDiscount;        $taxRate = isset($input['tax_rate']) ? (float)$input['tax_rate'] : 0.12;        $taxableAmount = $subtotal - $additionalDiscount;        $taxAmount = $taxableAmount * $taxRate;        $totalAmount = $subtotal - $additionalDiscount + $taxAmount;        return [            'subtotal' => $subtotal,            'tax_rate' => $taxRate,            'tax_amount' => $taxAmount,            'discount_amount' => $totalDiscount,            'total_amount' => $totalAmount        ];    }    private function insertSaleRecord(PDO $pdo, string $saleNumber, int $userId, array $totals, array $input): int    {        $statusSql = "SELECT status_id FROM transaction_statuses WHERE status_name = 'Completed' LIMIT 1";        $statusStmt = $pdo->prepare($statusSql);        $statusStmt->execute();        $statusId = $statusStmt->fetchColumn() ?: 1;         $paymentSql = "SELECT payment_method_id FROM payment_methods WHERE method_name = 'Cash' LIMIT 1";        $paymentStmt = $pdo->prepare($paymentSql);        $paymentStmt->execute();        $paymentMethodId = $paymentStmt->fetchColumn() ?: 1;         $paymentReceived = isset($input['payment_received']) ? (float)$input['payment_received'] : $totals['total_amount'];        $changeAmount = $paymentReceived - $totals['total_amount'];        $sql = "            INSERT INTO sales (                sale_number, user_id, customer_name, customer_phone,                subtotal, tax_rate, tax_amount, discount_amount, total_amount,                payment_method_id, status_id, payment_received, change_amount, notes            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)        ";        $stmt = $pdo->prepare($sql);        $stmt->execute([            $saleNumber,            $userId,            $input['customer_name'] ?? null,            $input['customer_phone'] ?? null,            $totals['subtotal'],            $totals['tax_rate'],            $totals['tax_amount'],            $totals['discount_amount'],            $totals['total_amount'],            $paymentMethodId,            $statusId,            $paymentReceived,            $changeAmount,            $input['notes'] ?? null        ]);        return $pdo->lastInsertId();    }    private function insertSaleItems(PDO $pdo, int $saleId, array $validatedItems): void    {        $statusSql = "SELECT status_id FROM transaction_statuses WHERE status_name = 'Completed' LIMIT 1";        $statusStmt = $pdo->prepare($statusSql);        $statusStmt->execute();        $statusId = $statusStmt->fetchColumn() ?: 1;        $itemSql = "            INSERT INTO sale_items (                sale_id, product_id, quantity, unit_price,                 discount_percent, discount_amount, line_total, status_id            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)        ";        $stockSql = "            UPDATE products             SET quantity_on_hand = quantity_on_hand - ?             WHERE product_id = ?        ";        $itemStmt = $pdo->prepare($itemSql);        $stockStmt = $pdo->prepare($stockSql);        foreach ($validatedItems as $item) {            $itemStmt->execute([                $saleId,                $item['product_id'],                $item['quantity'],                $item['unit_price'],                $item['discount_percent'],                $item['discount_amount'],                $item['line_total'],                $statusId            ]);            $stockStmt->execute([                $item['quantity'],                $item['product_id']            ]);        }    }    public function getTransactionHistory(): void    {        if (!isAuthenticated()) {            $this->respondError('Authentication required to view transaction history', 401);            return;        }        if (!hasRole(['Sales', 'Cashier', 'Admin'])) {            $this->respondError('Sales Staff or Administrator access required', 403);            return;        }        $pdo = $this->db();        try {            $currentUserId = $_SESSION['user_id'];            $userRole = $_SESSION['role'];            $page = max(1, (int)($_GET['page'] ?? 1));            $limit = min(100, max(5, (int)($_GET['limit'] ?? 20)));             $offset = ($page - 1) * $limit;            $search = trim($_GET['search'] ?? '');            $dateFrom = $_GET['dateFrom'] ?? $_GET['date_from'] ?? '';            $dateTo = $_GET['dateTo'] ?? $_GET['date_to'] ?? '';            $paymentMethodId = $_GET['payment_method_id'] ?? '';            $whereConditions = [];            $params = [];            if ($userRole === 'Cashier') {                $whereConditions[] = 's.user_id = ?';                $params[] = $currentUserId;            }            if (!empty($search)) {                $whereConditions[] = '(s.sale_number LIKE ? OR s.customer_name LIKE ? OR s.customer_phone LIKE ?)';                $searchParam = "%{$search}%";                $params[] = $searchParam;                $params[] = $searchParam;                $params[] = $searchParam;            }            if (!empty($dateFrom)) {                $whereConditions[] = 'DATE(s.sale_date) >= ?';                $params[] = $dateFrom;            }            if (!empty($dateTo)) {                $whereConditions[] = 'DATE(s.sale_date) <= ?';                $params[] = $dateTo;            }            if (!empty($paymentMethodId)) {                $whereConditions[] = 's.payment_method_id = ?';                $params[] = $paymentMethodId;            }            $whereClause = !empty($whereConditions) ? 'WHERE ' . implode(' AND ', $whereConditions) : '';            $countSql = "SELECT COUNT(*) as total FROM sales s {$whereClause}";            $countStmt = $pdo->prepare($countSql);            $countStmt->execute($params);            $totalRecords = $countStmt->fetch()['total'];            $totalPages = ceil($totalRecords / $limit);            $sql = "                SELECT                     s.sale_id,                    s.sale_number,                    s.customer_name,                    s.customer_phone,                    s.subtotal,                    s.tax_amount,                    s.discount_amount,                    s.total_amount,                    s.payment_received,                    s.change_amount,                    s.sale_date,                    pm.method_name as payment_method,                    ts.status_name as status,                    COUNT(si.sale_item_id) as item_count                FROM sales s                LEFT JOIN payment_methods pm ON s.payment_method_id = pm.payment_method_id                LEFT JOIN transaction_statuses ts ON s.status_id = ts.status_id                LEFT JOIN sale_items si ON s.sale_id = si.sale_id                {$whereClause}                GROUP BY s.sale_id                ORDER BY s.sale_date DESC                LIMIT {$limit} OFFSET {$offset}            ";            $stmt = $pdo->prepare($sql);            $stmt->execute($params);            $transactions = $stmt->fetchAll(PDO::FETCH_ASSOC);            $this->respondSuccess([                'transactions' => $transactions,                'pagination' => [                    'current_page' => $page,                    'total_pages' => $totalPages,                    'total_records' => $totalRecords,                    'per_page' => $limit,                    'has_next' => $page < $totalPages,                    'has_prev' => $page > 1                ],                'filters_applied' => [                    'search' => $search,                    'date_from' => $dateFrom,                    'date_to' => $dateTo,                    'payment_method_id' => $paymentMethodId                ]            ]);        } catch (Exception $e) {            $this->respondError('Failed to retrieve transaction history: ' . $e->getMessage(), 500);        }    }    public function getTransactionDetails(): void    {        if (!isAuthenticated()) {            $this->respondError('Authentication required', 401);            return;        }        if (!hasRole(['Sales', 'Cashier', 'Admin'])) {            $this->respondError('Sales Staff or Administrator access required', 403);            return;        }        $saleId = $_GET['sale_id'] ?? '';        if (empty($saleId) || !is_numeric($saleId)) {            $this->respondError('Valid sale_id is required', 400);            return;        }        $pdo = $this->db();        try {            $currentUserId = $_SESSION['user_id'];            $currentUserRole = $_SESSION['role'] ?? '';            if ($currentUserRole === 'Admin') {                $saleSql = "                    SELECT                         s.*,                        pm.method_name as payment_method,                        ts.status_name as status,                        u.username as cashier_name                    FROM sales s                    LEFT JOIN payment_methods pm ON s.payment_method_id = pm.payment_method_id                    LEFT JOIN transaction_statuses ts ON s.status_id = ts.status_id                    LEFT JOIN users u ON s.user_id = u.user_id                    WHERE s.sale_id = ?                ";                $stmt = $pdo->prepare($saleSql);                $stmt->execute([$saleId]);            } else {                $saleSql = "                    SELECT                         s.*,                        pm.method_name as payment_method,                        ts.status_name as status,                        u.username as cashier_name                    FROM sales s                    LEFT JOIN payment_methods pm ON s.payment_method_id = pm.payment_method_id                    LEFT JOIN transaction_statuses ts ON s.status_id = ts.status_id                    LEFT JOIN users u ON s.user_id = u.user_id                    WHERE s.sale_id = ? AND s.user_id = ?                ";                $stmt = $pdo->prepare($saleSql);                $stmt->execute([$saleId, $currentUserId]);            }            $sale = $stmt->fetch();            if (!$sale) {                $this->respondError('Transaction not found or access denied', 404);                return;            }            $itemsSql = "                SELECT                     si.*,                    p.name as product_name,                    p.barcode as product_barcode                FROM sale_items si                LEFT JOIN products p ON si.product_id = p.product_id                WHERE si.sale_id = ?                ORDER BY si.sale_item_id            ";            $stmt = $pdo->prepare($itemsSql);            $stmt->execute([$saleId]);            $items = $stmt->fetchAll(PDO::FETCH_ASSOC);            $this->respondSuccess([                'sale' => $sale,                'items' => $items            ]);        } catch (Exception $e) {            $this->respondError('Failed to retrieve transaction details: ' . $e->getMessage(), 500);        }    }    public function getReceiptData(): void    {        if (!isAuthenticated()) {            $this->respondError('Authentication required', 401);            return;        }        if (!hasRole(['Sales', 'Cashier', 'Admin'])) {            $this->respondError('Sales Staff or Administrator access required', 403);            return;        }        $saleId = $_GET['sale_id'] ?? '';        if (empty($saleId) || !is_numeric($saleId)) {            $this->respondError('Valid sale_id is required', 400);            return;        }        $pdo = $this->db();        try {            $currentUserId = $_SESSION['user_id'];            $currentUserRole = $_SESSION['role'] ?? '';            if ($currentUserRole === 'Admin') {                $saleSql = "                    SELECT                         s.sale_id,                        s.sale_number,                        s.customer_name,                        s.customer_phone,                        s.subtotal,                        s.tax_rate,                        s.tax_amount,                        s.discount_amount,                        s.total_amount,                        s.payment_received,                        s.change_amount,                        s.sale_date,                        pm.method_name as payment_method,                        u.username as cashier_name                    FROM sales s                    LEFT JOIN payment_methods pm ON s.payment_method_id = pm.payment_method_id                    LEFT JOIN users u ON s.user_id = u.user_id                    WHERE s.sale_id = ?                ";                $stmt = $pdo->prepare($saleSql);                $stmt->execute([$saleId]);            } else {                $saleSql = "                    SELECT                         s.sale_id,                        s.sale_number,                        s.customer_name,                        s.customer_phone,                        s.subtotal,                        s.tax_rate,                        s.tax_amount,                        s.discount_amount,                        s.total_amount,                        s.payment_received,                        s.change_amount,                        s.sale_date,                        pm.method_name as payment_method,                        u.username as cashier_name                    FROM sales s                    LEFT JOIN payment_methods pm ON s.payment_method_id = pm.payment_method_id                    LEFT JOIN users u ON s.user_id = u.user_id                    WHERE s.sale_id = ? AND s.user_id = ?                ";                $stmt = $pdo->prepare($saleSql);                $stmt->execute([$saleId, $currentUserId]);            }            $sale = $stmt->fetch();            if (!$sale) {                $this->respondError('Transaction not found or access denied', 404);                return;            }            $itemsSql = "                SELECT                     si.quantity,                    si.unit_price,                    si.discount_amount,                    si.line_total,                    p.name as product_name,                    p.barcode as product_barcode                FROM sale_items si                LEFT JOIN products p ON si.product_id = p.product_id                WHERE si.sale_id = ?                ORDER BY si.sale_item_id            ";            $stmt = $pdo->prepare($itemsSql);            $stmt->execute([$saleId]);            $items = $stmt->fetchAll(PDO::FETCH_ASSOC);            $receiptData = [                'sale_number' => $sale['sale_number'],                'sale_date' => date('Y-m-d', strtotime($sale['sale_date'])),                'sale_time' => date('H:i:s', strtotime($sale['sale_date'])),                'customer_name' => $sale['customer_name'] ?? '',                'customer_phone' => $sale['customer_phone'] ?? '',                'cashier_name' => $sale['cashier_name'],                'payment_method' => $sale['payment_method'],                'subtotal' => '₱' . number_format($sale['subtotal'], 2),                'tax_rate' => ($sale['tax_rate'] * 100) . '%',                'tax_amount' => '₱' . number_format($sale['tax_amount'], 2),                'discount_amount' => '₱' . number_format($sale['discount_amount'], 2),                'total_amount' => '₱' . number_format($sale['total_amount'], 2),                'payment_received' => '₱' . number_format($sale['payment_received'], 2),                'change_amount' => '₱' . number_format($sale['change_amount'], 2),                'items' => array_map(function($item) {                    return [                        'product_name' => $item['product_name'],                        'product_barcode' => $item['product_barcode'],                        'quantity' => $item['quantity'],                        'unit_price' => '₱' . number_format($item['unit_price'], 2),                        'discount_amount' => '₱' . number_format($item['discount_amount'], 2),                        'line_total' => '₱' . number_format($item['line_total'], 2)                    ];                }, $items)            ];            $this->respondSuccess($receiptData);        } catch (Exception $e) {            $this->respondError('Failed to retrieve receipt data: ' . $e->getMessage(), 500);        }    }    public function getTodayStats(): void    {        if (!isAuthenticated()) {            $this->respondError('Authentication required', 401);            return;        }        if (!hasRole(['Sales', 'Cashier', 'Admin'])) {            $this->respondError('Access denied', 403);            return;        }        try {            $pdo = $this->db();            $date = isset($_GET['date']) ? $_GET['date'] : date('Y-m-d');            $sql = "                SELECT                     COUNT(*) as transaction_count,                    COALESCE(SUM(total_amount), 0) as total_sales,                    COALESCE(SUM(items_sold), 0) as items_sold                FROM (                    SELECT                         s.sale_id,                        s.total_amount,                        COUNT(si.sale_item_id) as items_sold                    FROM sales s                    LEFT JOIN sale_items si ON s.sale_id = si.sale_id                    WHERE DATE(s.sale_date) = ?                    GROUP BY s.sale_id                ) as daily_stats            ";            $stmt = $pdo->prepare($sql);            $stmt->execute([$date]);            $stats = $stmt->fetch(PDO::FETCH_ASSOC);            $this->respondSuccess([                'date' => $date,                'transaction_count' => (int)$stats['transaction_count'],                'total_sales' => (float)$stats['total_sales'],                'items_sold' => (int)$stats['items_sold']            ]);        } catch (Exception $e) {            $this->respondError('Failed to retrieve today\'s statistics: ' . $e->getMessage(), 500);        }    }}if (!defined('TESTING') && basename($_SERVER['SCRIPT_NAME']) === 'SalesAPI.php') {    $api = new SalesAPI();    $api->route();}