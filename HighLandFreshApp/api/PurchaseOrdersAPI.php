<?phprequire_once __DIR__ . '/BaseAPI.php';require_once __DIR__ . '/SessionConfig.php';class PurchaseOrdersAPI extends BaseAPI{    public function route(): void    {        $this->initializeSession();        if (!$this->requireInventoryOrAdminAuth()) {            return;        }        $method = $this->getMethod();        $input = $this->getJsonInput() ?? [];        $operation = $this->getOperation();        $this->handle(function () use ($method, $operation, $input) {            switch ($operation ?: $method) {                case 'GET':                case 'getAllPurchaseOrders':                    if (isset($_GET['id']) && is_numeric($_GET['id'])) {                        $this->getPurchaseOrderDetails();                    } else {                        $this->getAllPurchaseOrders($input);                    }                    break;                case 'POST':                case 'createPurchaseOrder':                    $this->createPurchaseOrder($input);                    break;                case 'PUT':                case 'updatePurchaseOrder':                    if (isset($_GET['action']) && $_GET['action'] === 'receive_delivery') {                        $this->receiveDelivery($input);                    } else {                        $this->updatePurchaseOrder($input);                    }                    break;                default:                    $this->respond(['success' => false, 'message' => 'Method not allowed'], 405);                    break;            }        });    }    public function getAllPurchaseOrders(array $input = []): void    {        $whereConditions = [];        $params = [];        if (isset($input['status']) && $input['status'] !== '') {            $whereConditions[] = 'ts.status_name = ?';            $params[] = $input['status'];        }        if (isset($input['supplier_id']) && is_numeric($input['supplier_id'])) {            $whereConditions[] = 'po.supplier_id = ?';            $params[] = (int)$input['supplier_id'];        }        if (isset($input['date_from']) && $input['date_from'] !== '') {            $whereConditions[] = 'DATE(po.order_date) >= ?';            $params[] = $input['date_from'];        }        if (isset($input['date_to']) && $input['date_to'] !== '') {            $whereConditions[] = 'DATE(po.order_date) <= ?';            $params[] = $input['date_to'];        }        $whereClause = $whereConditions ? 'WHERE ' . implode(' AND ', $whereConditions) : '';        $sql = "SELECT                     po.po_id as purchase_order_id,                    po.po_number,                    po.supplier_id,                    s.name as supplier_name,                    s.email as supplier_email,                    po.user_id,                    u.username as created_by,                    po.total_amount,                    ts.status_name as status,                    po.order_date,                    po.expected_delivery_date,                    po.received_date,                    po.notes,                    po.created_at,                    COUNT(poi.po_item_id) as items_count                FROM purchase_orders po                LEFT JOIN suppliers s ON po.supplier_id = s.supplier_id                LEFT JOIN users u ON po.user_id = u.user_id                LEFT JOIN transaction_statuses ts ON po.status_id = ts.status_id                LEFT JOIN purchase_order_items poi ON po.po_id = poi.po_id                $whereClause                GROUP BY po.po_id                ORDER BY po.order_date DESC";        $stmt = $this->db()->prepare($sql);        $stmt->execute($params);        $orders = $stmt->fetchAll(PDO::FETCH_ASSOC);        $this->respond(['success' => true, 'data' => $orders]);    }    public function createPurchaseOrder(array $input): void    {        $missing = $this->requireParams($input, ['supplier_id', 'items']);        if ($missing) {            $this->respond(['success' => false, 'message' => 'Supplier and items are required'], 400);            return;        }        $supplier_id = (int)$input['supplier_id'];        $items = $input['items'];        $expected_delivery_date = $input['expected_delivery_date'] ?? null;        $notes = isset($input['notes']) ? htmlspecialchars(trim($input['notes']), ENT_QUOTES, 'UTF-8') : null;        $user_id = (int)$_SESSION['user_id'];        $supplier = $this->validateSupplier($supplier_id);        if (!$supplier) {            $this->respond(['success' => false, 'message' => 'Invalid supplier selected'], 400);            return;        }        if (!is_array($items) || empty($items)) {            $this->respond(['success' => false, 'message' => 'At least one item is required'], 400);            return;        }        $validatedItems = $this->validateItems($items);        if (!$validatedItems['success']) {            $this->respond(['success' => false, 'message' => $validatedItems['message']], 400);            return;        }        $itemsData = $validatedItems['items'];        $totalAmount = $validatedItems['total'];        try {            $this->db()->beginTransaction();            $poNumber = $this->generatePONumber();            $statusStmt = $this->db()->prepare("SELECT status_id FROM transaction_statuses WHERE status_name = 'PO Sent' LIMIT 1");            $statusStmt->execute();            $statusResult = $statusStmt->fetch(PDO::FETCH_ASSOC);            $status_id = $statusResult ? (int)$statusResult['status_id'] : 11;             $poStmt = $this->db()->prepare(                "INSERT INTO purchase_orders (po_number, supplier_id, user_id, total_amount, status_id, expected_delivery_date, notes)                  VALUES (?, ?, ?, ?, ?, ?, ?)"            );            $poStmt->execute([$poNumber, $supplier_id, $user_id, $totalAmount, $status_id, $expected_delivery_date, $notes]);            $po_id = (int)$this->db()->lastInsertId();            $itemStmt = $this->db()->prepare(                "INSERT INTO purchase_order_items (po_id, product_id, ordered_quantity, unit_cost, line_total)                  VALUES (?, ?, ?, ?, ?)"            );            foreach ($itemsData as $item) {                $itemStmt->execute([                    $po_id,                    $item['product_id'],                    $item['quantity'],                    $item['unit_cost'],                    $item['line_total']                ]);            }            $this->db()->commit();            $emailResult = ['success' => false, 'message' => 'Email functionality temporarily disabled'];            $createdPO = $this->getPODetails($po_id);            $response = [                'success' => true,                'message' => 'Purchase order created successfully',                'data' => $createdPO,                'email_sent' => $emailResult['success'],                'email_message' => $emailResult['message']            ];            $this->respond($response);        } catch (Exception $e) {            $this->db()->rollBack();            $this->respond(['success' => false, 'message' => 'Failed to create purchase order: ' . $e->getMessage()], 500);        }    }    public function getPurchaseOrderDetails(): void    {        $po_id = isset($_GET['id']) && is_numeric($_GET['id']) ? (int)$_GET['id'] : null;        if (!$po_id) {            $this->respond(['success' => false, 'message' => 'Valid PO ID required'], 400);            return;        }        $po = $this->getPODetails($po_id);        if (!$po) {            $this->respond(['success' => false, 'message' => 'Purchase order not found'], 404);            return;        }        $this->respond(['success' => true, 'data' => $po]);    }    public function updatePurchaseOrder(array $input): void    {        $po_id = isset($_GET['id']) && is_numeric($_GET['id']) ? (int)$_GET['id'] : null;        if (!$po_id) {            $this->respond(['success' => false, 'message' => 'Valid PO ID required'], 400);            return;        }        $po = $this->getPODetails($po_id);        if (!$po) {            $this->respond(['success' => false, 'message' => 'Purchase order not found'], 404);            return;        }        $updateFields = [];        $updateValues = [];        if (isset($input['status']) && $input['status'] !== '') {            $statusStmt = $this->db()->prepare("SELECT status_id FROM transaction_statuses WHERE status_name = ? AND status_type = 'Purchase' LIMIT 1");            $statusStmt->execute([$input['status']]);            $statusResult = $statusStmt->fetch(PDO::FETCH_ASSOC);            if (!$statusResult) {                $this->respond(['success' => false, 'message' => 'Invalid status'], 400);                return;            }            $updateFields[] = 'status_id = ?';            $updateValues[] = (int)$statusResult['status_id'];            if ($input['status'] === 'PO Received') {                $updateFields[] = 'received_date = NOW()';            }        }        if (isset($input['notes'])) {            $updateFields[] = 'notes = ?';            $updateValues[] = htmlspecialchars(trim($input['notes']), ENT_QUOTES, 'UTF-8');        }        if (empty($updateFields)) {            $this->respond(['success' => false, 'message' => 'No valid fields to update'], 400);            return;        }        $updateValues[] = $po_id;        $sql = 'UPDATE purchase_orders SET ' . implode(', ', $updateFields) . ' WHERE po_id = ?';        $stmt = $this->db()->prepare($sql);        $stmt->execute($updateValues);        $updatedPO = $this->getPODetails($po_id);        $this->respond(['success' => true, 'message' => 'Purchase order updated successfully', 'data' => $updatedPO]);    }    public function receiveDelivery(array $input): void    {        $po_id = isset($_GET['id']) && is_numeric($_GET['id']) ? (int)$_GET['id'] : null;        if (!$po_id) {            $this->respond(['success' => false, 'message' => 'Valid PO ID required'], 400);            return;        }        $missing = $this->requireParams($input, ['items']);        if ($missing) {            $this->respond(['success' => false, 'message' => 'Items with received quantities are required'], 400);            return;        }        $po = $this->getPODetails($po_id);        if (!$po) {            $this->respond(['success' => false, 'message' => 'Purchase order not found'], 404);            return;        }        $validStatuses = ['PO Sent', 'PO Confirmed', 'PO Partially Received'];        if (!in_array($po['status'], $validStatuses)) {            $this->respond(['success' => false, 'message' => 'Purchase order status must be "PO Sent", "PO Confirmed", or "PO Partially Received" to receive delivery'], 400);            return;        }        $items = $input['items'];        if (!is_array($items) || empty($items)) {            $this->respond(['success' => false, 'message' => 'At least one item with received quantity is required'], 400);            return;        }        try {            $this->db()->beginTransaction();            $allItemsFullyReceived = true;            $anyItemsReceived = false;            $debugInfo = [];            foreach ($items as $item) {                if (!isset($item['po_item_id'], $item['received_quantity'])) {                    $this->db()->rollBack();                    $this->respond(['success' => false, 'message' => 'Each item must have po_item_id and received_quantity'], 400);                    return;                }                $po_item_id = (int)$item['po_item_id'];                $received_quantity = (float)$item['received_quantity'];                if ($received_quantity < 0) {                    $this->db()->rollBack();                    $this->respond(['success' => false, 'message' => 'Received quantity cannot be negative'], 400);                    return;                }                $itemStmt = $this->db()->prepare("                    SELECT poi.product_id, poi.ordered_quantity, poi.received_quantity, p.quantity_on_hand                     FROM purchase_order_items poi                     JOIN products p ON poi.product_id = p.product_id                     WHERE poi.po_item_id = ? AND poi.po_id = ?                ");                $itemStmt->execute([$po_item_id, $po_id]);                $currentItem = $itemStmt->fetch(PDO::FETCH_ASSOC);                if (!$currentItem) {                    $this->db()->rollBack();                    $this->respond(['success' => false, 'message' => "Invalid item ID: $po_item_id"], 400);                    return;                }                $totalReceived = (float)$currentItem['received_quantity'] + $received_quantity;                $orderedQuantity = (float)$currentItem['ordered_quantity'];                if ($totalReceived > $orderedQuantity) {                    $this->db()->rollBack();                    $this->respond(['success' => false, 'message' => "Cannot receive more than ordered quantity for item $po_item_id"], 400);                    return;                }                $updateItemStmt = $this->db()->prepare("                    UPDATE purchase_order_items                     SET received_quantity = ?                     WHERE po_item_id = ?                ");                $updateItemStmt->execute([$totalReceived, $po_item_id]);                if ($received_quantity > 0) {                    $anyItemsReceived = true;                    $newStockLevel = (float)$currentItem['quantity_on_hand'] + $received_quantity;                    $updateStockStmt = $this->db()->prepare("                        UPDATE products                         SET quantity_on_hand = ?                         WHERE product_id = ?                    ");                    $updateStockStmt->execute([$newStockLevel, $currentItem['product_id']]);                }                if ($totalReceived < $orderedQuantity) {                    $allItemsFullyReceived = false;                }                $debugInfo[] = [                    'po_item_id' => $po_item_id,                    'ordered_quantity' => $orderedQuantity,                    'previous_received' => $currentItem['received_quantity'],                    'new_received' => $received_quantity,                    'total_received' => $totalReceived,                    'is_complete' => $totalReceived >= $orderedQuantity                ];            }            $allItemsStmt = $this->db()->prepare("                SELECT poi.po_item_id, poi.ordered_quantity, poi.received_quantity, p.name as product_name                FROM purchase_order_items poi                 JOIN products p ON poi.product_id = p.product_id                 WHERE poi.po_id = ?            ");            $allItemsStmt->execute([$po_id]);            $allItems = $allItemsStmt->fetchAll(PDO::FETCH_ASSOC);            $overallComplete = true;            $overallAnyReceived = false;            foreach ($allItems as $poItem) {                $orderedQty = (float)$poItem['ordered_quantity'];                $receivedQty = (float)$poItem['received_quantity'];                if ($receivedQty > 0) {                    $overallAnyReceived = true;                }                if ($receivedQty < $orderedQty) {                    $overallComplete = false;                }                $debugInfo[] = [                    'po_item_id' => $poItem['po_item_id'],                    'product_name' => $poItem['product_name'],                    'ordered_quantity' => $orderedQty,                    'received_quantity' => $receivedQty,                    'is_item_complete' => $receivedQty >= $orderedQty                ];            }            $newStatus = '';            if (!$overallAnyReceived) {                $newStatus = $po['status'];             } elseif ($overallComplete) {                $newStatus = 'PO Received';            } else {                $newStatus = 'PO Partially Received';            }            if ($overallAnyReceived) {                $statusStmt = $this->db()->prepare("SELECT status_id FROM transaction_statuses WHERE status_name = ? AND status_type = 'Purchase'");                $statusStmt->execute([$newStatus]);                $statusResult = $statusStmt->fetch(PDO::FETCH_ASSOC);                if ($statusResult) {                    $updatePOStmt = $this->db()->prepare("                        UPDATE purchase_orders                         SET status_id = ?, received_date = NOW()                         WHERE po_id = ?                    ");                    $updatePOStmt->execute([$statusResult['status_id'], $po_id]);                }            }            $this->db()->commit();            $updatedPO = $this->getPODetails($po_id);            $this->respond([                'success' => true,                 'message' => 'Delivery received successfully',                 'data' => $updatedPO,                'status_updated' => $newStatus,                'debug' => [                    'all_po_items' => $debugInfo,                    'overall_any_received' => $overallAnyReceived,                    'overall_complete' => $overallComplete,                    'calculated_status' => $newStatus,                    'items_in_this_delivery' => count($items)                ]            ]);        } catch (Exception $e) {            $this->db()->rollBack();            $this->respond(['success' => false, 'message' => 'Failed to process delivery: ' . $e->getMessage()], 500);        }    }    private function validateSupplier(int $supplier_id): ?array    {        $stmt = $this->db()->prepare("SELECT supplier_id, name, email, contact_person FROM suppliers WHERE supplier_id = ? AND is_active = 1");        $stmt->execute([$supplier_id]);        return $stmt->fetch(PDO::FETCH_ASSOC) ?: null;    }    private function validateItems(array $items): array    {        $validatedItems = [];        $total = 0;        foreach ($items as $item) {            if (!isset($item['product_id'], $item['quantity'], $item['unit_cost'])) {                return ['success' => false, 'message' => 'Each item must have product_id, quantity, and unit_cost'];            }            $product_id = (int)$item['product_id'];            $quantity = (float)$item['quantity'];            $unit_cost = (float)$item['unit_cost'];            if ($quantity <= 0) {                return ['success' => false, 'message' => 'Quantity must be greater than 0'];            }            if ($unit_cost <= 0) {                return ['success' => false, 'message' => 'Unit cost must be greater than 0'];            }            $productStmt = $this->db()->prepare("SELECT product_id, name FROM products WHERE product_id = ?");            $productStmt->execute([$product_id]);            $product = $productStmt->fetch(PDO::FETCH_ASSOC);            if (!$product) {                return ['success' => false, 'message' => "Invalid product ID: $product_id"];            }            $line_total = $quantity * $unit_cost;            $total += $line_total;            $validatedItems[] = [                'product_id' => $product_id,                'product_name' => $product['name'],                'quantity' => $quantity,                'unit_cost' => $unit_cost,                'line_total' => $line_total            ];        }        return ['success' => true, 'items' => $validatedItems, 'total' => $total];    }    private function generatePONumber(): string    {        $prefix = 'PO';        $year = date('Y');        $stmt = $this->db()->prepare(            "SELECT COALESCE(MAX(CAST(SUBSTRING(po_number, 8) AS UNSIGNED)), 0) + 1 as next_num              FROM purchase_orders              WHERE po_number LIKE ?"        );        $stmt->execute(["$prefix$year%"]);        $result = $stmt->fetch(PDO::FETCH_ASSOC);        $nextNum = str_pad($result['next_num'], 4, '0', STR_PAD_LEFT);        return "$prefix$year$nextNum";    }    private function sendPOEmail(int $po_id, array $supplier, array $items, float $total, string $poNumber): array    {        try {            $to = $supplier['email'];            $subject = "Purchase Order             $emailBody = $this->generatePOEmailTemplate($poNumber, $supplier, $items, $total);            $headers = "MIME-Version: 1.0" . "\r\n";            $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";            $headers .= "From: highland.fresh.orders@gmail.com" . "\r\n";            $mailSent = mail($to, $subject, $emailBody, $headers);            if ($mailSent) {                return ['success' => true, 'message' => 'Email sent successfully using built-in mail function'];            } else {                error_log("PO Email Content (not sent): To: $to, Subject: $subject");                return ['success' => true, 'message' => 'Purchase order created (email logged instead of sent)'];            }        } catch (Exception $e) {            error_log("PO Email failed: " . $e->getMessage());            return ['success' => true, 'message' => 'Purchase order created (email functionality disabled)'];        }    }    private function generatePOEmailTemplate(string $poNumber, array $supplier, array $items, float $total): string    {        $date = date('F j, Y');        $itemsHtml = '';        foreach ($items as $item) {            $itemsHtml .= sprintf(                '<tr>                    <td style="padding: 8px; border: 1px solid                     <td style="padding: 8px; border: 1px solid                     <td style="padding: 8px; border: 1px solid                     <td style="padding: 8px; border: 1px solid                 </tr>',                htmlspecialchars($item['product_name']),                $item['quantity'],                $item['unit_cost'],                $item['line_total']            );        }        return "        <!DOCTYPE html>        <html>        <head>            <style>                body { font-family: Arial, sans-serif; }                .header { background-color:                 .content { padding: 20px; }                table { width: 100%; border-collapse: collapse; margin: 20px 0; }                th { background-color:                 td { padding: 8px; border: 1px solid                 .total { font-weight: bold; font-size: 18px; color:             </style>        </head>        <body>            <div class='header'>                <h1>Highland Fresh Daily Products</h1>                <h2>Purchase Order             </div>            <div class='content'>                <p><strong>Date:</strong> $date</p>                <p><strong>Supplier:</strong> {$supplier['name']}</p>                <p><strong>Contact:</strong> {$supplier['contact_person']}</p>                <h3>Order Details:</h3>                <table>                    <thead>                        <tr>                            <th>Product</th>                            <th>Quantity</th>                            <th>Unit Cost</th>                            <th>Line Total</th>                        </tr>                    </thead>                    <tbody>                        $itemsHtml                        <tr>                            <td colspan='3' style='text-align: right; font-weight: bold;'>Total Amount:</td>                            <td style='text-align: right;' class='total'>$" . number_format($total, 2) . "</td>                        </tr>                    </tbody>                </table>                <p>Please confirm receipt of this order and provide expected delivery date.</p>                <p>Thank you for your continued partnership.</p>                <hr>                <p><small>Highland Fresh Daily Products<br>                Email: highland.fresh.orders@gmail.com<br>                This is an automated message.</small></p>            </div>        </body>        </html>";    }    private function getPODetails(int $po_id): ?array    {        $stmt = $this->db()->prepare(            "SELECT                 po.po_id,                po.po_number,                po.supplier_id,                s.name as supplier_name,                s.email as supplier_email,                po.user_id,                u.username as created_by,                po.total_amount,                ts.status_name as status,                po.order_date,                po.expected_delivery_date,                po.received_date,                po.notes,                po.created_at            FROM purchase_orders po            LEFT JOIN suppliers s ON po.supplier_id = s.supplier_id            LEFT JOIN users u ON po.user_id = u.user_id            LEFT JOIN transaction_statuses ts ON po.status_id = ts.status_id            WHERE po.po_id = ?"        );        $stmt->execute([$po_id]);        $po = $stmt->fetch(PDO::FETCH_ASSOC);        if ($po) {            $itemsStmt = $this->db()->prepare(                "SELECT                     poi.po_item_id,                    poi.product_id,                    p.name as product_name,                    poi.ordered_quantity,                    poi.received_quantity,                    poi.unit_cost,                    poi.line_total                FROM purchase_order_items poi                LEFT JOIN products p ON poi.product_id = p.product_id                WHERE poi.po_id = ?                ORDER BY p.name"            );            $itemsStmt->execute([$po_id]);            $po['items'] = $itemsStmt->fetchAll(PDO::FETCH_ASSOC);        }        return $po ?: null;    }}if (!defined('TESTING') && basename($_SERVER['SCRIPT_NAME']) === 'PurchaseOrdersAPI.php') {    $api = new PurchaseOrdersAPI(['methods' => 'GET, POST, PUT, DELETE, OPTIONS']);    $api->route();}?>